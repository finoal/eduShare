{
  "address": "0x17d3B882F863462365D60B9ebcDB48dA4F4078eD",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "commentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "commentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLikeCount",
          "type": "uint256"
        }
      ],
      "name": "CommentLiked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "parentCommentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "replyCommentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        }
      ],
      "name": "CommentReplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "integral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Integral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newListingFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "ListingFeePercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "NftListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "NftPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NftUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionRecord",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LISTING_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        }
      ],
      "name": "addComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "priceInWei",
          "type": "uint256"
        }
      ],
      "name": "calculateListingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commentId",
          "type": "uint256"
        }
      ],
      "name": "getComment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "likes",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "replies",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "parentId",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.Comment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEducationalResource",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "eduUri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resourceType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "subject",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "educationLevel",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "downloadCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rating",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratingCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "commentIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "isAccredited",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "accreditedCount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "accreditedInstitutions",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "buyers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRating",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "reviews",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "reviewers",
              "type": "address[]"
            }
          ],
          "internalType": "struct YourCollectible.EduResource",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getResourceComments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "likes",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "replies",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "parentId",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.Comment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getResourcesByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "eduUri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resourceType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "subject",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "educationLevel",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "downloadCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rating",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratingCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "commentIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "isAccredited",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "accreditedCount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "accreditedInstitutions",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "buyers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRating",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "reviews",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "reviewers",
              "type": "address[]"
            }
          ],
          "internalType": "struct YourCollectible.EduResource[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getResourcesByBuy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "eduUri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resourceType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "subject",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "educationLevel",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "downloadCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rating",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratingCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "commentIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "isAccredited",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "accreditedCount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "accreditedInstitutions",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "buyers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRating",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "reviews",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "reviewers",
              "type": "address[]"
            }
          ],
          "internalType": "struct YourCollectible.EduResource[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "subject",
          "type": "string"
        }
      ],
      "name": "getResourcesBySubject",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPurchasedResources",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commentId",
          "type": "uint256"
        }
      ],
      "name": "likeComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listEducationalResource",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "eduUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint96",
          "name": "royaltyFeeNumber",
          "type": "uint96"
        },
        {
          "internalType": "string",
          "name": "resourceType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "subject",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "educationLevel",
          "type": "string"
        }
      ],
      "name": "mintEducationalResource",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchaseEducationalResource",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "rateResource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_password",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_avatar",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_bio",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newListingFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "setListingFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unlistEducationalResource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPercentage",
          "type": "uint256"
        }
      ],
      "name": "updateListingFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newpassword",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "updatePassword",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "avatar",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bio",
          "type": "string"
        }
      ],
      "name": "updateUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "verifyPwd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x16e56e4269c31c6561f1524b3caf8282333e11108a88ff0ef7bb3c9f7208850c",
  "receipt": {
    "to": null,
    "from": "0xA8311e0e5742902444A83eb53d883CE4CBf4830e",
    "contractAddress": "0x17d3B882F863462365D60B9ebcDB48dA4F4078eD",
    "transactionIndex": 0,
    "gasUsed": "5434980",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000400000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000001000000000040000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000002000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3e27a0332c34365d8fd0d7930f953ab470e1b2994b030517fe937f6a5c6f6502",
    "transactionHash": "0x16e56e4269c31c6561f1524b3caf8282333e11108a88ff0ef7bb3c9f7208850c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 69924,
        "transactionHash": "0x16e56e4269c31c6561f1524b3caf8282333e11108a88ff0ef7bb3c9f7208850c",
        "address": "0x17d3B882F863462365D60B9ebcDB48dA4F4078eD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a8311e0e5742902444a83eb53d883ce4cbf4830e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3e27a0332c34365d8fd0d7930f953ab470e1b2994b030517fe937f6a5c6f6502"
      }
    ],
    "blockNumber": 69924,
    "cumulativeGasUsed": "5434980",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 10,
  "solcInputHash": "b7b3f9df314b28465282c40d344fd0ed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLikeCount\",\"type\":\"uint256\"}],\"name\":\"CommentLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"parentCommentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"replyCommentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"CommentReplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"integral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Integral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newListingFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ListingFeePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"NftListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"NftPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NftUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LISTING_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"name\":\"addComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"calculateListingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commentId\",\"type\":\"uint256\"}],\"name\":\"getComment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"replies\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.Comment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEducationalResource\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"eduUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resourceType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"educationLevel\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"downloadCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"commentIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isAccredited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accreditedCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accreditedInstitutions\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRating\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"reviews\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"reviewers\",\"type\":\"address[]\"}],\"internalType\":\"struct YourCollectible.EduResource\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getResourceComments\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"replies\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.Comment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getResourcesByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"eduUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resourceType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"educationLevel\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"downloadCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"commentIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isAccredited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accreditedCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accreditedInstitutions\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRating\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"reviews\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"reviewers\",\"type\":\"address[]\"}],\"internalType\":\"struct YourCollectible.EduResource[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getResourcesByBuy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"eduUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resourceType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"educationLevel\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"downloadCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"commentIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isAccredited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accreditedCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accreditedInstitutions\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRating\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"reviews\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"reviewers\",\"type\":\"address[]\"}],\"internalType\":\"struct YourCollectible.EduResource[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"}],\"name\":\"getResourcesBySubject\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPurchasedResources\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commentId\",\"type\":\"uint256\"}],\"name\":\"likeComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listEducationalResource\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"eduUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumber\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"resourceType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"educationLevel\",\"type\":\"string\"}],\"name\":\"mintEducationalResource\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseEducationalResource\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"rateResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bio\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newListingFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setListingFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlistEducationalResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"updateListingFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newpassword\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"updatePassword\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"}],\"name\":\"updateUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"verifyPwd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourCollectible.sol\":\"YourCollectible\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x93d24eea4e6ddbed53ef161567ae62bfd0c3aebb7b48f37e4dbeb7a937108866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/YourCollectible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\nimport \\\"./uilt.sol\\\";\\n\\ncontract YourCollectible is\\n    ERC721,\\n    ERC721Enumerable,\\n    ERC721URIStorage,\\n    Ownable,\\n    ReentrancyGuard,\\n    ERC721Royalty,\\n    uilt\\n{\\n\\n    //\\u8ffd\\u8e2a\\u548c\\u751f\\u6210\\u552f\\u4e00\\u7684ID\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter; // \\u552f\\u4e00ID\\u8ba1\\u6570\\u5668\\n    Counters.Counter private _transactionCounter; // \\u4ea4\\u6613\\u987a\\u5e8f\\u8ba1\\u6570\\u5668\\n\\n    uint256 public totalFeesCollected; // \\u6536\\u96c6\\u7684\\u624b\\u7eed\\u8d39\\n\\n\\n    // \\u7528\\u6237\\u6a21\\u5757\\n    struct User {\\n        string name; // \\u7528\\u6237\\u540d\\n        bytes32 password; // \\u5bc6\\u7801\\n        address payable wallet; // \\u94b1\\u5305\\u5730\\u5740\\n        string avatar; // \\u5934\\u50cf\\n        string bio; // \\u4e2a\\u4eba\\u7b80\\u4ecb\\n        uint256 integral; //\\u79ef\\u5206\\n    }\\n\\n\\n    // \\u7528\\u6237\\u6ce8\\u518c\\u529f\\u80fd\\n    mapping(address => User) private  _users; // \\u7528\\u6237\\u6620\\u5c04\\n\\n    function registerUser(string memory _name, string memory _password, string memory _avatar, string memory _bio) public {\\n        require(bytes(_name).length > 0);\\n        require(bytes(_users[msg.sender].name).length == 0, \\\"User already registered\\\");\\n        _users[msg.sender] = User(_name, stringToBytes32(_password), payable(msg.sender), _avatar, _bio, 0);\\n    }\\n\\n    // \\u83b7\\u53d6\\u7528\\u6237\\u8d2d\\u4e70\\u7684\\u6559\\u80b2\\u8d44\\u6e90\\u5217\\u8868\\n    function getUserPurchasedResources(address userAddress) public view returns (uint256[] memory) {\\n        uint256[] memory purchasedResources = new uint256[](_tokenIdCounter.current());\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 1; i <= _tokenIdCounter.current(); i++) {\\n            EduResource storage resource = _eduResources[i];\\n            for (uint256 j = 0; j < resource.buyers.length; j++) {\\n                if (resource.buyers[j] == userAddress) {\\n                    purchasedResources[count] = i;\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        // \\u521b\\u5efa\\u6700\\u7ec8\\u6570\\u7ec4\\uff0c\\u53ea\\u5305\\u542b\\u5b9e\\u9645\\u8d2d\\u4e70\\u7684\\u8d44\\u6e90\\n        uint256[] memory result = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            result[i] = purchasedResources[i];\\n        }\\n        \\n        return result;\\n    }\\n\\n    //\\u7528\\u6237\\u767b\\u5f55\\n   function verifyPwd(address userAddress,string memory userName, string memory password) public view returns (bool, bool) {\\n        require(bytes(_users[userAddress].name).length != 0);\\n        \\n        User memory user = _users[userAddress];\\n        \\n        bool isNameValid = compareStrings(user.name, userName);\\n        bool isPwdValid = compareBytes32Strings(user.password, stringToBytes32(password));\\n\\n        return (isNameValid && isPwdValid, false);\\n    }\\n\\n    function updatePassword(string memory _newpassword,string memory _password) public {\\n        require(bytes(_users[msg.sender].name).length != 0);\\n        bool isPwdValid = compareBytes32Strings(_users[msg.sender].password, stringToBytes32(_password));\\n        require(isPwdValid, \\\"Invalid password\\\");\\n        _users[msg.sender].password = stringToBytes32(_newpassword);\\n    }\\n\\n    function updateUserInfo(string memory avatar, string memory bio) public {\\n        require(bytes(_users[msg.sender].name).length != 0);\\n        _users[msg.sender].avatar = avatar;\\n        _users[msg.sender].bio = bio;\\n    }\\n\\n    function getUserMessage(address userAddress) public view  returns (string memory, string memory, uint256, string memory) {\\n        User memory user = _users[userAddress];\\n        return (user.name, user.bio, user.integral, user.avatar);\\n    }\\n\\n    // NFT\\u6570\\u636e\\u7ed3\\u6784\\n    // \\u6559\\u80b2\\u8d44\\u6e90\\u6570\\u636e\\u7ed3\\u6784\\n    struct Comment {\\n        uint256 id;          // \\u8bc4\\u8bbaID\\n        address author;      // \\u8bc4\\u8bba\\u4f5c\\u8005\\n        string content;      // \\u8bc4\\u8bba\\u5185\\u5bb9\\n        uint256 timestamp;   // \\u8bc4\\u8bba\\u65f6\\u95f4\\n        uint256 likes;       // \\u70b9\\u8d5e\\u6570\\n        uint256[] replies;   // \\u56de\\u590d\\u8bc4\\u8bba\\u7684ID\\u6570\\u7ec4\\n        uint256 parentId;    // \\u7236\\u8bc4\\u8bbaID\\uff0c0\\u8868\\u793a\\u662f\\u4e3b\\u8bc4\\u8bba\\n    }\\n\\n    struct EduResource {\\n        uint256 tokenId;     // \\u8d44\\u6e90\\u552f\\u4e00ID\\n        uint256 price;       // \\u8d44\\u6e90\\u4ef7\\u683c\\n        address payable creator; // \\u8d44\\u6e90\\u521b\\u5efa\\u8005\\n        bool isListed;       // \\u662f\\u5426\\u4e0a\\u67b6\\u9500\\u552e\\n        string eduUri;     // \\u6559\\u80b2\\u5c01\\u9762URI\\n        string tokenUri;     // \\u8d44\\u6e90\\u5143\\u6570\\u636eURI\\n        string resourceType; // \\u8d44\\u6e90\\u7c7b\\u578b\\uff08\\u89c6\\u9891\\u3001\\u6587\\u6863\\u3001\\u8bfe\\u4ef6\\u7b49\\uff09\\n        string subject;      // \\u5b66\\u79d1\\u5206\\u7c7b\\n        string educationLevel; // \\u6559\\u80b2\\u9636\\u6bb5\\uff08\\u5c0f\\u5b66\\u3001\\u521d\\u4e2d\\u3001\\u9ad8\\u4e2d\\u7b49\\uff09\\n        uint256 downloadCount; // \\u4e0b\\u8f7d\\u6b21\\u6570\\n        uint256 rating;      // \\u8bc4\\u5206\\u603b\\u548c\\n        uint256 ratingCount; // \\u8bc4\\u5206\\u4eba\\u6570\\n        uint256[] commentIds; // \\u8bc4\\u8bbaID\\u6570\\u7ec4\\n        bool isAccredited;   // \\u662f\\u5426\\u7ecf\\u8fc7\\u8ba4\\u8bc1\\n        uint256 accreditedCount; // \\u8ba4\\u8bc1\\u6b21\\u6570\\n        address[] accreditedInstitutions; // \\u8ba4\\u8bc1\\u673a\\u6784\\u5217\\u8868\\n        address[] buyers;    // \\u8d2d\\u4e70\\u8005\\u96c6\\u5408\\n        uint256 creationTime; // \\u521b\\u5efa\\u65f6\\u95f4\\n        uint256 minRating;   // \\u6700\\u4f4e\\u8bc4\\u5206\\u8981\\u6c42\\n        string[] reviews;    // \\u8bc4\\u8bba\\u5185\\u5bb9\\u6570\\u7ec4\\n        address[] reviewers; // \\u8bc4\\u8bba\\u8005\\u5730\\u5740\\u6570\\u7ec4\\n    }\\n\\n    // \\u6dfb\\u52a0\\u8d44\\u6e90\\u8bbf\\u95ee\\u63a7\\u5236\\u4fee\\u9970\\u5668\\n    modifier onlyResourceCreator(uint256 tokenId) {\\n        require(msg.sender == _eduResources[tokenId].creator);\\n        _;\\n    }\\n\\n\\n    // \\u7528\\u6237\\u79ef\\u5206\\u5956\\u52b1\\u51fd\\u6570\\n    function rewardUserIntegral(address user, uint256 amount) internal {\\n        _users[user].integral += amount;\\n        emit Integral(user, 0, amount, block.timestamp);\\n    }\\n\\n    // \\u6559\\u80b2\\u8d44\\u6e90\\u76f8\\u5173\\u6620\\u5c04\\n    mapping(uint256 => EduResource) private _eduResources; // \\u901a\\u8fc7ID\\u6620\\u5c04\\u5230\\u6559\\u80b2\\u8d44\\u6e90\\n    // mapping(string => uint256[]) private _resourcesByType; // \\u6309\\u8d44\\u6e90\\u7c7b\\u578b\\u5206\\u7c7b\\n    mapping(string => uint256[]) private _resourcesBySubject; // \\u6309\\u5b66\\u79d1\\u5206\\u7c7b\\n    mapping(address => uint256[]) private _resourcesByAddress; // \\u6309\\u5730\\u5740\\u5206\\u7c7b\\n    mapping (address => uint256[]) private _resourcesAddress; // \\u8d2d\\u4e70\\u5217\\u8868\\n    // mapping(string => uint256[]) private _resourcesByLevel; // \\u6309\\u6559\\u80b2\\u9636\\u6bb5\\u5206\\u7c7b\\n\\n    uint256 public listingFeePercentage = 250; // 2.5%\\n    uint256 public constant MAX_LISTING_FEE_PERCENTAGE = 1000; // 10%\\n\\n    event NftListed(uint256 indexed tokenId, address indexed seller, uint256 price, uint256 timestamp, uint256 transactionId);\\n    event NftUnlisted(uint256 transactionId, uint256 indexed tokenId, address indexed seller, uint256 timestamp);\\n    event NftPurchased(uint256 indexed tokenId, address indexed buyer, address indexed seller, uint256 price, uint256 timestamp, uint256 transactionId);\\n    event ListingFeePercentageUpdated(uint256 newListingFeePercentage);\\n    event FeesWithdrawn(address indexed owner, uint256 amount);\\n    event RoyaltyPaid(uint256 transactionId, uint256 indexed tokenId, address indexed creator, uint256 amount, uint256 timestamp);\\n    event FeesReceived(address indexed sender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId, uint256 timestamp, bytes32 transactionId);\\n    event Integral(address indexed sender, uint256 tokenId, uint256 integral, uint256 timestamp);\\n\\n    constructor() ERC721(\\\"YourCollectible\\\", \\\"LF\\\") {\\n        // _tokenIdCounter.increment(); // \\u4ece1\\u5f00\\u59cb\\u8ba1\\u6570\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"https://gateway.pinata.cloud/ipfs/\\\";\\n    }\\n\\n    // \\u521b\\u5efa\\u6559\\u80b2\\u8d44\\u6e90NFT\\n    function mintEducationalResource(\\n        address to,\\n        string memory eduUri,\\n        string memory uri,\\n        uint96 royaltyFeeNumber,\\n        string memory resourceType,\\n        string memory subject,\\n        string memory educationLevel\\n    ) public returns (uint256) {\\n        _tokenIdCounter.increment();\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n\\n        _setTokenRoyalty(tokenId, to, royaltyFeeNumber);\\n        string memory completeTokenURI = string(abi.encodePacked(_baseURI(), uri));\\n        _resourcesBySubject[subject].push(tokenId);\\n        _resourcesByAddress[msg.sender].push(tokenId);\\n        _eduResources[tokenId] = EduResource({\\n            tokenId: tokenId,\\n            price: 0,\\n            creator: payable(to),\\n            isListed: false,\\n            eduUri: eduUri,\\n            tokenUri: completeTokenURI,\\n            resourceType: resourceType,\\n            subject: subject,\\n            educationLevel: educationLevel,\\n            downloadCount: 0,\\n            rating: 0,\\n            ratingCount: 0,\\n            commentIds: new uint256[](0),\\n            isAccredited: false,\\n            accreditedCount: 0,\\n            accreditedInstitutions: new address[](0),\\n            buyers: new address[](0),\\n            creationTime: block.timestamp,\\n            minRating: 0,\\n            reviews: new string[](0),\\n            reviewers: new address[](0)\\n        });\\n        return tokenId;\\n    }\\n    // \\u4e0a\\u67b6\\u6559\\u80b2\\u8d44\\u6e90\\n    function listEducationalResource(uint256 tokenId, uint256 price) external payable {\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\n        require(ownerOf(tokenId) == msg.sender, \\\"You are not the owner\\\");\\n        require(!_eduResources[tokenId].isListed, \\\"edu is already listed\\\");\\n        uint256 listingFee = calculateListingFee(price);\\n        require(msg.value >= calculateListingFee(price), \\\"Insufficient listing fee\\\");\\n\\n        totalFeesCollected += listingFee;\\n        _eduResources[tokenId].price = price;\\n        _eduResources[tokenId].isListed = true;\\n\\n        uint256 transactionId = _transactionCounter.current();\\n        _transactionCounter.increment();\\n\\n        emit NftListed(tokenId, msg.sender, price, block.timestamp, transactionId);\\n    }\\n\\n    // \\u4e0b\\u67b6\\u6559\\u80b2\\u8d44\\u6e90\\n    function unlistEducationalResource(uint256 tokenId) external {\\n        EduResource storage item = _eduResources[tokenId];\\n        require(item.isListed);\\n        require(ownerOf(tokenId) == msg.sender);\\n        item.isListed = false;\\n        item.price = 0;\\n\\n        uint256 transactionId = _transactionCounter.current();\\n        _transactionCounter.increment();\\n\\n        emit NftUnlisted(transactionId,tokenId, msg.sender, block.timestamp);\\n    }\\n\\n\\n\\n    // \\u8d2d\\u4e70\\u6559\\u80b2\\u8d44\\u6e90\\n    function purchaseEducationalResource(uint256 tokenId) external payable nonReentrant {\\n        require(_eduResources[tokenId].isListed);\\n        require(msg.value >= _eduResources[tokenId].price);\\n        require(_eduResources[tokenId].creator != msg.sender);\\n\\n        //\\u5224\\u65ad\\u662f\\u5426\\u5df2\\u7ecf\\u8d2d\\u4e70\\u4e86\\u8be5\\u6559\\u80b2\\u8d44\\u6e90\\n        for (uint256 i = 0; i < _eduResources[tokenId].buyers.length; i++) {\\n            if (_eduResources[tokenId].buyers[i] == msg.sender) {\\n                revert(\\\"You have already purchased this resource\\\");\\n            }\\n        }\\n        // \\u589e\\u52a0\\u4e0b\\u8f7d\\u6b21\\u6570\\n        _eduResources[tokenId].downloadCount += 1;       \\n        // \\u5c06\\u8d2d\\u4e70\\u8005\\u6dfb\\u52a0\\u5230\\u8d2d\\u4e70\\u8005\\u96c6\\u5408\\u4e2d\\n        _eduResources[tokenId].buyers.push(msg.sender);\\n        _resourcesAddress[msg.sender].push(tokenId);\\n        // \\u8f6c\\u8d26\\u7ed9\\u521b\\u5efa\\u8005\\n        payable(_eduResources[tokenId].creator).transfer(_eduResources[tokenId].price);\\n        // // \\u5904\\u7406\\u7248\\u7a0e\\n        // (address creator, uint256 royaltyAmount) = royaltyInfo(tokenId, msg.value);\\n        uint256 transactionId = _transactionCounter.current();\\n        // if (royaltyAmount > 0) {\\n        //     payable(creator).transfer(royaltyAmount);\\n        //     _transactionCounter.increment();\\n        //     emit RoyaltyPaid(transactionId, tokenId, creator, royaltyAmount, block.timestamp);\\n        // }\\n        _transactionCounter.increment();\\n        emit NftPurchased(tokenId, msg.sender, _eduResources[tokenId].creator, _eduResources[tokenId].price, block.timestamp, transactionId);      \\n    }\\n\\n\\n    event TransactionRecord(address indexed buyer, address indexed seller, uint256 tokenId, uint256 amount, uint256 timestamp, uint256 transactionId);\\n\\n    // // \\u83b7\\u53d6\\u6240\\u6709\\u6559\\u80b2\\u8d44\\u6e90\\u4fe1\\u606f\\n    // function getAllEducationalResources() public view returns (EduResource[] memory) {\\n    //     uint256 total = _tokenIdCounter.current();\\n\\n    //     EduResource[] memory resources = new EduResource[](total);\\n    //     for (uint256 i = 1; i <= total; i++) {\\n    //         resources[i] = _eduResources[i];\\n    //     }\\n\\n    //     return resources;\\n    // }\\n\\n    // \\u83b7\\u53d6TokenId\\n    function getTokenId() public view returns (uint256) {\\n        return _tokenIdCounter.current();\\n    }\\n    \\n    // \\u83b7\\u53d6\\u6559\\u80b2\\u8d44\\u6e90\\u4fe1\\u606f\\n    function getEducationalResource(uint256 tokenId) public view returns (EduResource memory) {\\n        return _eduResources[tokenId];\\n    }\\n\\n    // \\u6309\\u5b66\\u79d1\\u83b7\\u53d6\\u8d44\\u6e90\\u5217\\u8868\\n    function getResourcesBySubject(string memory subject) public view returns (uint256[] memory) {\\n        return _resourcesBySubject[subject];\\n    }\\n    //\\u901a\\u8fc7\\u5730\\u5740\\u83b7\\u53d6\\u8d44\\u6e90\\u5217\\u8868\\n    function getResourcesByAddress(address userAddress) public view returns (EduResource[] memory) {\\n        uint256 totalBuy = _resourcesByAddress[userAddress].length;\\n        EduResource[] memory items = new EduResource[](totalBuy);\\n\\n        for (uint256 i = 0; i < totalBuy; ++i) {\\n            uint256 tokenId = _resourcesByAddress[userAddress][i];\\n            items[i] = _eduResources[tokenId];\\n        }\\n        return items;\\n    }\\n\\n    //\\u83b7\\u53d6\\u6307\\u5b9a\\u5730\\u5740\\u8d2d\\u4e70\\u7684\\u6559\\u80b2\\u8d44\\u6e90\\n    function getResourcesByBuy(address userAddress) public view returns (EduResource[] memory) {\\n        uint256 totalBuy = _resourcesAddress[userAddress].length;\\n        EduResource[] memory items = new EduResource[](totalBuy);\\n\\n        for (uint256 i = 0; i < totalBuy; ++i) {\\n            uint256 tokenId = _resourcesAddress[userAddress][i];\\n            items[i] = _eduResources[tokenId];\\n        }\\n        return items;\\n    }\\n\\n    // \\u8bc4\\u5206\\u529f\\u80fd\\n    function rateResource(uint256 tokenId, uint256 score) public {\\n        require(score >= 1 && score <= 5);\\n        // \\u68c0\\u67e5\\u7528\\u6237\\u662f\\u5426\\u5df2\\u7ecf\\u5728\\u8bc4\\u5206\\u8005\\u5217\\u8868\\u4e2d\\n        bool hasReviewed = false;\\n        for(uint i = 0; i < _eduResources[tokenId].reviewers.length; i++) {\\n            if(_eduResources[tokenId].reviewers[i] == msg.sender) {\\n                hasReviewed = true;\\n                break;\\n            }\\n        }\\n        require(!hasReviewed, \\\"Already rated\\\");\\n\\n        _eduResources[tokenId].rating += score;\\n        _eduResources[tokenId].ratingCount += 1;\\n        _eduResources[tokenId].reviewers.push(msg.sender);\\n    }\\n\\n    // \\u8bc4\\u8bba\\u76f8\\u5173\\u7684\\u72b6\\u6001\\u53d8\\u91cf\\n    Counters.Counter private _commentIdCounter;\\n    mapping(uint256 => Comment) private _comments;\\n    mapping(uint256 => mapping(address => bool)) private _commentLikes;\\n\\n    // \\u8bc4\\u8bba\\u76f8\\u5173\\u7684\\u4e8b\\u4ef6\\n    event CommentAdded(uint256 indexed tokenId, uint256 indexed commentId, address indexed author, string content, uint256 timestamp);\\n    event CommentLiked(uint256 indexed commentId, address indexed liker, uint256 newLikeCount);\\n    event CommentReplied(uint256 indexed parentCommentId, uint256 indexed replyCommentId, address indexed author);\\n\\n    // \\u6dfb\\u52a0\\u8bc4\\u8bba\\u529f\\u80fd\\n    function addComment(uint256 tokenId, string memory content, uint256 parentId) public {\\n        require(bytes(content).length > 0);\\n        require(_exists(tokenId));\\n        \\n        // \\u5982\\u679c\\u662f\\u56de\\u590d\\u8bc4\\u8bba\\uff0c\\u68c0\\u67e5\\u7236\\u8bc4\\u8bba\\u662f\\u5426\\u5b58\\u5728\\n        if (parentId != 0) {\\n            require(_comments[parentId].author != address(0));\\n            require(_comments[parentId].parentId == 0);\\n        }\\n\\n        _commentIdCounter.increment();\\n        uint256 commentId = _commentIdCounter.current();\\n\\n        Comment storage newComment = _comments[commentId];\\n        newComment.id = commentId;\\n        newComment.author = msg.sender;\\n        newComment.content = content;\\n        newComment.timestamp = block.timestamp;\\n        newComment.likes = 0;\\n        newComment.parentId = parentId;\\n\\n        if (parentId != 0) {\\n            _comments[parentId].replies.push(commentId);\\n            emit CommentReplied(parentId, commentId, msg.sender);\\n        }\\n\\n        _eduResources[tokenId].commentIds.push(commentId);\\n        // \\u8bc4\\u8bba\\u5956\\u52b1\\u79ef\\u5206\\n        rewardUserIntegral(msg.sender, 1);\\n        emit CommentAdded(tokenId, commentId, msg.sender, content, block.timestamp);\\n    }\\n\\n    // \\u70b9\\u8d5e\\u8bc4\\u8bba\\u529f\\u80fd\\n    function likeComment(uint256 commentId) public {\\n        require(_comments[commentId].author != address(0));\\n        require(!_commentLikes[commentId][msg.sender]);\\n        require(_comments[commentId].author != msg.sender);\\n\\n        _comments[commentId].likes += 1;\\n        _commentLikes[commentId][msg.sender] = true;\\n\\n        emit CommentLiked(commentId, msg.sender, _comments[commentId].likes);\\n    }\\n\\n    // \\u83b7\\u53d6\\u8bc4\\u8bba\\u8be6\\u60c5\\n    function getComment(uint256 commentId) public view returns (Comment memory) {\\n        require(_comments[commentId].author != address(0));\\n        return _comments[commentId];\\n    }\\n\\n    // \\u83b7\\u53d6\\u8d44\\u6e90\\u7684\\u6240\\u6709\\u8bc4\\u8bba\\n    function getResourceComments(uint256 tokenId) public view returns (Comment[] memory) {\\n        uint256[] memory commentIds = _eduResources[tokenId].commentIds;\\n        Comment[] memory comments = new Comment[](commentIds.length);\\n        \\n        for (uint256 i = 0; i < commentIds.length; i++) {\\n            comments[i] = _comments[commentIds[i]];\\n        }\\n        \\n        return comments;\\n    }\\n\\n    function setListingFeePercentage(uint256 _newListingFeePercentage) external onlyOwner { // \\u8bbe\\u7f6e\\u62cd\\u5356\\u624b\\u7eed\\u8d39\\u767e\\u5206\\u6bd4\\n        require(_newListingFeePercentage <= MAX_LISTING_FEE_PERCENTAGE);\\n        listingFeePercentage = _newListingFeePercentage;\\n\\n        emit ListingFeePercentageUpdated(_newListingFeePercentage);\\n    }\\n    \\n    function calculateListingFee(uint256 priceInWei) public view returns (uint256) { // \\u8ba1\\u7b97\\u62cd\\u5356\\u624b\\u7eed\\u8d39\\n        return (priceInWei * listingFeePercentage) / 10000;\\n    }\\n\\n    function _beforeTokenTransfer( // \\u91cd\\u5199ERC721\\u7684_beforeTokenTransfer\\u65b9\\u6cd5\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize); \\n    } \\n\\n    function _burn( // \\u9500\\u6bc1NFT\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721URIStorage, ERC721Royalty) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI( // \\u83b7\\u53d6NFT\\u7684\\u5143\\u6570\\u636e\\n        uint256 tokenId\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface( // \\u68c0\\u67e5\\u5408\\u7ea6\\u662f\\u5426\\u652f\\u6301\\u67d0\\u4e2a\\u63a5\\u53e3\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Royalty)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n    \\n    // \\u63d0\\u53d6\\u5e73\\u53f0\\u624b\\u7eed\\u8d39\\n    function withdrawFees() public onlyOwner {\\n        require(totalFeesCollected > 0);\\n        uint256 amount = totalFeesCollected;\\n        totalFeesCollected = 0;\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\n        require(sent);\\n        emit FeesWithdrawn(owner(), amount);\\n    }\\n    \\n    // \\u66f4\\u65b0\\u4e0a\\u67b6\\u624b\\u7eed\\u8d39\\u6bd4\\u4f8b\\n    function updateListingFeePercentage(uint256 newPercentage) public onlyOwner {\\n        require(newPercentage <= MAX_LISTING_FEE_PERCENTAGE);\\n        listingFeePercentage = newPercentage;\\n        emit ListingFeePercentageUpdated(newPercentage);\\n    }\\n}\",\"keccak256\":\"0x9bc80cc7e5be82c0fe2756ddd2f27a23e152a47d3e20d113909f22dfba931644\",\"license\":\"MIT\"},\"contracts/uilt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ncontract uilt {\\n    // \\u5c06\\u5b57\\u7b26\\u4e32\\u8f6c\\u6362\\u4e3abytes32\\n    function stringToBytes32(string memory source) \\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    // \\u5c06bytes32\\u8f6c\\u6362\\u4e3a\\u5b57\\u7b26\\u4e32\\n    function bytes32ToString(bytes32 x) \\n        internal \\n        pure \\n        returns (string memory) \\n    {\\n        bytes memory bytesString = new bytes(32);\\n        uint256 charCount = 0;\\n        \\n        for (uint256 j = 0; j < 32; j++) {\\n            bytes1 char = bytes1(bytes32(uint256(x) * 2**(8 * j)));\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        \\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // \\u6bd4\\u8f83\\u4e24\\u4e2a\\u5b57\\u7b26\\u4e32\\u662f\\u5426\\u76f8\\u7b49\\n    function compareStrings(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    // \\u6bd4\\u8f83\\u4e24\\u4e2abytes32\\u662f\\u5426\\u76f8\\u7b49\\n    function compareBytes32Strings(bytes32 a, bytes32 b) \\n        internal \\n        pure \\n        returns (bool) \\n    {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n}\",\"keccak256\":\"0x5ac05b4280455c714377e39196fe6061861a7da2a420e92b49f749cab02d2740\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260fa6017553480156200001657600080fd5b506040518060400160405280600f81526020016e596f7572436f6c6c65637469626c6560881b81525060405180604001604052806002815260200161262360f11b81525081600290816200006b91906200019d565b5060036200007a82826200019d565b5050506200009762000091620000a260201b60201c565b620000a6565b6001600e5562000269565b3390565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012357607f821691505b6020821081036200014457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019857600081815260208120601f850160051c81016020861015620001735750805b601f850160051c820191505b8181101562000194578281556001016200017f565b5050505b505050565b81516001600160401b03811115620001b957620001b9620000f8565b620001d181620001ca84546200010e565b846200014a565b602080601f831160018114620002095760008415620001f05750858301515b600019600386901b1c1916600185901b17855562000194565b600085815260208120601f198616915b828110156200023a5788860151825594840194600190910190840162000219565b5085821015620002595787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b615f1c80620002796000396000f3fe6080604052600436106102885760003560e01c806360c6d8ae1161015a578063a4436aba116100c1578063d8be30fc1161007a578063d8be30fc146107dc578063d8d84f8f1461080c578063deb82ed91461082c578063e985e9c514610842578063f2fde38b1461088b578063fe532d10146108ab57600080fd5b8063a4436aba146106eb578063b88d4fde14610718578063bf06eda614610738578063c87b56dd1461076f578063ccfb9ba61461078f578063cdfbb351146107bc57600080fd5b806387fe9c831161011357806387fe9c831461062b5780638da5cb5b1461064b57806391adb1bb1461066957806393e54a561461069657806395d89b41146106b6578063a22cb465146106cb57600080fd5b806360c6d8ae146105805780636352211e146105965780636c6db136146105b657806370a08231146105d6578063715018a6146105f6578063813d7e871461060b57600080fd5b80631f45dbf3116101fe57806342842e0e116101b757806342842e0e146104e5578063476343ee146105055780634b3fcab51461051a5780634eb3a9e01461053a5780634f6ccce71461054d5780635f79cdfe1461056d57600080fd5b80631f45dbf31461041957806323b872dd146104465780632a55205a146104665780632af356c2146102d75780632cd8bf84146104a55780632f745c59146104c557600080fd5b80630800e300116102505780630800e30014610349578063081812fc146103765780630888de39146103ae578063095ea7b3146103c457806314ba9749146103e457806318160ddd1461040457600080fd5b8063010a38f51461028d578063012cc1e2146102b557806301bb8cc5146102d757806301ffc9a7146102f757806306fdde0314610327575b600080fd5b34801561029957600080fd5b506102a26108cb565b6040519081526020015b60405180910390f35b3480156102c157600080fd5b506102d56102d03660046150bf565b6108db565b005b3480156102e357600080fd5b506102d56102f23660046150bf565b6109df565b34801561030357600080fd5b506103176103123660046150ee565b610a31565b60405190151581526020016102ac565b34801561033357600080fd5b5061033c610a42565b6040516102ac919061515b565b34801561035557600080fd5b506103696103643660046150bf565b610ad4565b6040516102ac919061521e565b34801561038257600080fd5b506103966103913660046150bf565b610c49565b6040516001600160a01b0390911681526020016102ac565b3480156103ba57600080fd5b506102a260175481565b3480156103d057600080fd5b506102d56103df36600461524d565b610c70565b3480156103f057600080fd5b506102d56103ff366004615277565b610d8a565b34801561041057600080fd5b50600a546102a2565b34801561042557600080fd5b50610439610434366004615299565b610ee0565b6040516102ac91906152b4565b34801561045257600080fd5b506102d56104613660046152f8565b61108e565b34801561047257600080fd5b50610486610481366004615277565b6110bf565b604080516001600160a01b0390931683526020830191909152016102ac565b3480156104b157600080fd5b506102a26104c03660046150bf565b61116b565b3480156104d157600080fd5b506102a26104e036600461524d565b611188565b3480156104f157600080fd5b506102d56105003660046152f8565b61121e565b34801561051157600080fd5b506102d5611239565b34801561052657600080fd5b506102d56105353660046153df565b61131c565b6102d56105483660046150bf565b61137d565b34801561055957600080fd5b506102a26105683660046150bf565b61160d565b6102d561057b366004615277565b6116a0565b34801561058c57600080fd5b506102a260115481565b3480156105a257600080fd5b506103966105b13660046150bf565b6118b1565b3480156105c257600080fd5b506102d56105d1366004615442565b611911565b3480156105e257600080fd5b506102a26105f1366004615299565b611ac1565b34801561060257600080fd5b506102d5611b47565b34801561061757600080fd5b506102d56106263660046150bf565b611b5b565b34801561063757600080fd5b506102a26106463660046154a8565b611c03565b34801561065757600080fd5b50600d546001600160a01b0316610396565b34801561067557600080fd5b50610689610684366004615299565b611f8b565b6040516102ac91906157dd565b3480156106a257600080fd5b506102d56106b136600461583f565b612656565b3480156106c257600080fd5b5061033c612792565b3480156106d757600080fd5b506102d56106e63660046158eb565b6127a1565b3480156106f757600080fd5b5061070b6107063660046150bf565b6127b0565b6040516102ac9190615927565b34801561072457600080fd5b506102d561073336600461597c565b612a1a565b34801561074457600080fd5b506107586107533660046159eb565b612a52565b6040805192151583529015156020830152016102ac565b34801561077b57600080fd5b5061033c61078a3660046150bf565b612cd1565b34801561079b57600080fd5b506107af6107aa3660046150bf565b612cdc565b6040516102ac9190615a5e565b3480156107c857600080fd5b506102d56107d73660046153df565b6132ce565b3480156107e857600080fd5b506107fc6107f7366004615299565b613377565b6040516102ac9493929190615a71565b34801561081857600080fd5b50610439610827366004615abb565b6135b5565b34801561083857600080fd5b506102a26103e881565b34801561084e57600080fd5b5061031761085d366004615aef565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561089757600080fd5b506102d56108a6366004615299565b613625565b3480156108b757600080fd5b506106896108c6366004615299565b61369b565b60006108d6600f5490565b905090565b6000818152601960205260409020600101546001600160a01b03166108ff57600080fd5b6000818152601a6020908152604080832033845290915290205460ff161561092657600080fd5b600081815260196020526040902060010154336001600160a01b039091160361094e57600080fd5b6000818152601960205260408120600401805460019290610970908490615b38565b90915550506000818152601a6020908152604080832033808552908352818420805460ff19166001179055848452601983529281902060040154905190815283917f74193480b729de5bd62f8dc477d123a18811cce036b34c0747a1d0f1e8a2a65e910160405180910390a350565b6109e7613d5e565b6103e88111156109f657600080fd5b60178190556040518181527f7b7b531d40c1aa89dac7360f225e5660c63799638af64655583d3ec191be11e29060200160405180910390a150565b6000610a3c82613db8565b92915050565b606060028054610a5190615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7d90615b4b565b8015610aca5780601f10610a9f57610100808354040283529160200191610aca565b820191906000526020600020905b815481529060010190602001808311610aad57829003601f168201915b5050505050905090565b610adc614e6e565b6000828152601960205260409020600101546001600160a01b0316610b0057600080fd5b600082815260196020908152604091829020825160e0810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191610b4a90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7690615b4b565b8015610bc35780601f10610b9857610100808354040283529160200191610bc3565b820191906000526020600020905b815481529060010190602001808311610ba657829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020018280548015610c2f57602002820191906000526020600020905b815481526020019060010190808311610c1b575b505050505081526020016006820154815250509050919050565b6000610c5482613dc3565b506000908152600660205260409020546001600160a01b031690565b6000610c7b826118b1565b9050806001600160a01b0316836001600160a01b031603610ced5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610d095750610d09813361085d565b610d7b5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610ce4565b610d858383613e22565b505050565b60018110158015610d9c575060058111155b610da557600080fd5b6000805b60008481526013602081905260409091200154811015610e1f57600084815260136020819052604090912001805433919083908110610dea57610dea615b85565b6000918252602090912001546001600160a01b031603610e0d5760019150610e1f565b80610e1781615b9b565b915050610da9565b508015610e5e5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481c985d1959609a1b6044820152606401610ce4565b60008381526013602052604081206009018054849290610e7f908490615b38565b90915550506000838152601360205260408120600a01805460019290610ea6908490615b38565b9091555050506000918252506013602081815260408320909101805460018101825590835291200180546001600160a01b03191633179055565b60606000610eed600f5490565b6001600160401b03811115610f0457610f04615334565b604051908082528060200260200182016040528015610f2d578160200160208202803683370190505b509050600060015b600f548111610fea576000818152601360205260408120905b600f820154811015610fd557866001600160a01b031682600f018281548110610f7957610f79615b85565b6000918252602090912001546001600160a01b031603610fc35782858581518110610fa657610fa6615b85565b602090810291909101015283610fbb81615b9b565b945050610fd5565b80610fcd81615b9b565b915050610f4e565b50508080610fe290615b9b565b915050610f35565b506000816001600160401b0381111561100557611005615334565b60405190808252806020026020018201604052801561102e578160200160208202803683370190505b50905060005b828110156110855783818151811061104e5761104e615b85565b602002602001015182828151811061106857611068615b85565b60209081029190910101528061107d81615b9b565b915050611034565b50949350505050565b6110983382613e90565b6110b45760405162461bcd60e51b8152600401610ce490615bb4565b610d85838383613f0f565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916111345750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090611153906001600160601b031687615c01565b61115d9190615c18565b915196919550909350505050565b60006127106017548361117e9190615c01565b610a3c9190615c18565b600061119383611ac1565b82106111f55760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610ce4565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b610d8583838360405180602001604052806000815250612a1a565b611241613d5e565b60006011541161125057600080fd5b601180546000918290559061126d600d546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d80600081146112b7576040519150601f19603f3d011682016040523d82523d6000602084013e6112bc565b606091505b50509050806112ca57600080fd5b600d546001600160a01b03166001600160a01b03167fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a8360405161131091815260200190565b60405180910390a25050565b336000908152601260205260409020805461133690615b4b565b905060000361134457600080fd5b3360009081526012602052604090206003016113608382615c88565b50336000908152601260205260409020600401610d858282615c88565b611385614080565b600081815260136020526040902060020154600160a01b900460ff166113aa57600080fd5b6000818152601360205260409020600101543410156113c857600080fd5b600081815260136020526040902060020154336001600160a01b03909116036113f057600080fd5b60005b6000828152601360205260409020600f01548110156114b7576000828152601360205260409020600f0180543391908390811061143257611432615b85565b6000918252602090912001546001600160a01b0316036114a55760405162461bcd60e51b815260206004820152602860248201527f596f75206861766520616c7265616479207075726368617365642074686973206044820152677265736f7572636560c01b6064820152608401610ce4565b806114af81615b9b565b9150506113f3565b5060008181526013602052604081206008018054600192906114da908490615b38565b90915550506000818152601360208181526040808420600f81018054600181810183559187528487200180546001600160a01b031916339081179091558652601684528286208054808301825590875284872001879055868652939092526002820154929091015490516001600160a01b03929092169281156108fc029290818181858888f19350505050158015611576573d6000803e3d6000fd5b50600061158260105490565b9050611592601080546001019055565b6000828152601360209081526040918290206002810154600190910154835190815242928101929092529181018390526001600160a01b0390911690339084907f725ab672573b7f2e0f0f193920dbee98941ec549e9b36cf3bfc3cc83e51ae1ae9060600160405180910390a45061160a6001600e55565b50565b6000611618600a5490565b821061167b5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610ce4565b600a828154811061168e5761168e615b85565b90600052602060002001549050919050565b600081116116f05760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e2030000000006044820152606401610ce4565b336116fa836118b1565b6001600160a01b0316146117485760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606401610ce4565b600082815260136020526040902060020154600160a01b900460ff16156117a95760405162461bcd60e51b815260206004820152601560248201527419591d481a5cc8185b1c9958591e481b1a5cdd1959605a1b6044820152606401610ce4565b60006117b48261116b565b90506117bf8261116b565b34101561180e5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206c697374696e672066656500000000000000006044820152606401610ce4565b80601160008282546118209190615b38565b9091555050600083815260136020526040812060018101849055600201805460ff60a01b1916600160a01b17905561185760105490565b9050611867601080546001019055565b60408051848152426020820152908101829052339085907fdc69aa9aa1dd4abfb7a3d6b64d72382a2a4d38700d6b5c3d5784e23eb82be3379060600160405180910390a350505050565b6000818152600460205260408120546001600160a01b031680610a3c5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ce4565b600082511161191f57600080fd5b6000838152600460205260409020546001600160a01b031661194057600080fd5b8015611986576000818152601960205260409020600101546001600160a01b031661196a57600080fd5b6000818152601960205260409020600601541561198657600080fd5b611994601880546001019055565b600061199f60185490565b60008181526019602052604090208181556001810180546001600160a01b03191633179055909150600281016119d58582615c88565b5042600382015560006004820155600681018390558215611a435760008381526019602090815260408083206005018054600181018255908452918320909101849055513391849186917f773a33a5a4242f5ff076510cef32d710535badf6e057fe93491705ffb9cf29b191a45b60008581526013602090815260408220600b018054600181810183559184529190922001839055611a759033906140d9565b336001600160a01b031682867f92eb5433849a5a2a1922dadaf613eff78bb7de4173779f8d4683b877aac7260f8742604051611ab2929190615d47565b60405180910390a45050505050565b60006001600160a01b038216611b2b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610ce4565b506001600160a01b031660009081526005602052604090205490565b611b4f613d5e565b611b596000614155565b565b60008181526013602052604090206002810154600160a01b900460ff16611b8157600080fd5b33611b8b836118b1565b6001600160a01b031614611b9e57600080fd5b60028101805460ff60a01b19169055600060018083019190915560108054918201905560408051828152426020820152339185917f40516db99aa3df4a6f96ef1158a18bd27c30a7b4e719738adc639d18a00369aa91015b60405180910390a3505050565b6000611c13600f80546001019055565b6000611c1e600f5490565b9050611c2a89826141a7565b611c3481886141c1565b611c3f818a8861428c565b6000611c4961439a565b88604051602001611c5b929190615d69565b6040516020818303038152906040529050601485604051611c7c9190615d98565b9081526040805160209281900383018120805460018082018355600092835285832090910187905533825260158552838220805491820181558252848220018690556102a0820183528582528382018190526001600160a01b038e168284015260608201819052608082018d905260a0820185905260c082018a905260e082018990526101008201889052610120820181905261014082018190526101608201819052825181815280850184526101808301526101a082018190526101c08201819052825181815280850184526101e083015282518181528085018452610200830152426102208301526102408201819052825181815293840190925291610260830191611d9a565b6060815260200190600190039081611d855790505b5081526020016000604051908082528060200260200182016040528015611dcb578160200160208202803683370190505b509052600083815260136020908152604091829020835181559083015160018201559082015160028201805460608501511515600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560808201516003820190611e399082615c88565b5060a08201516004820190611e4e9082615c88565b5060c08201516005820190611e639082615c88565b5060e08201516006820190611e789082615c88565b506101008201516007820190611e8e9082615c88565b5061012082015160088201556101408201516009820155610160820151600a8201556101808201518051611ecc91600b840191602090910190614eb4565b506101a0820151600c8201805460ff19169115159190911790556101c0820151600d8201556101e08201518051611f0d91600e840191602090910190614eff565b506102008201518051611f2a91600f840191602090910190614eff565b50610220820151601082015561024082015160118201556102608201518051611f5d916012840191602090910190614f54565b506102808201518051611f7a916013840191602090910190614eff565b50929b9a5050505050505050505050565b6001600160a01b038116600090815260156020526040812054606091816001600160401b03811115611fbf57611fbf615334565b604051908082528060200260200182016040528015611ff857816020015b611fe5614fa6565b815260200190600190039081611fdd5790505b50905060005b8281101561264e576001600160a01b038516600090815260156020526040812080548390811061203057612030615b85565b6000918252602080832091909101548083526013825260409283902083516102a0810185528154815260018201549381019390935260028101546001600160a01b03811694840194909452600160a01b90930460ff161515606083015260038301805491945091929160808401916120a790615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546120d390615b4b565b80156121205780601f106120f557610100808354040283529160200191612120565b820191906000526020600020905b81548152906001019060200180831161210357829003601f168201915b5050505050815260200160048201805461213990615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461216590615b4b565b80156121b25780601f10612187576101008083540402835291602001916121b2565b820191906000526020600020905b81548152906001019060200180831161219557829003601f168201915b505050505081526020016005820180546121cb90615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546121f790615b4b565b80156122445780601f1061221957610100808354040283529160200191612244565b820191906000526020600020905b81548152906001019060200180831161222757829003601f168201915b5050505050815260200160068201805461225d90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461228990615b4b565b80156122d65780601f106122ab576101008083540402835291602001916122d6565b820191906000526020600020905b8154815290600101906020018083116122b957829003601f168201915b505050505081526020016007820180546122ef90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461231b90615b4b565b80156123685780601f1061233d57610100808354040283529160200191612368565b820191906000526020600020905b81548152906001019060200180831161234b57829003601f168201915b505050505081526020016008820154815260200160098201548152602001600a8201548152602001600b82018054806020026020016040519081016040528092919081815260200182805480156123de57602002820191906000526020600020905b8154815260200190600101908083116123ca575b50505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e820180548060200260200160405190810160405280929190818152602001828054801561246557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612447575b50505050508152602001600f82018054806020026020016040519081016040528092919081815260200182805480156124c757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116124a9575b50505050508152602001601082015481526020016011820154815260200160128201805480602002602001604051908101604052809291908181526020016000905b828210156125b557838290600052602060002001805461252890615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461255490615b4b565b80156125a15780601f10612576576101008083540402835291602001916125a1565b820191906000526020600020905b81548152906001019060200180831161258457829003601f168201915b505050505081526020019060010190612509565b5050505081526020016013820180548060200260200160405190810160405280929190818152602001828054801561261657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125f8575b50505050508152505083838151811061263157612631615b85565b6020026020010181905250508061264790615b9b565b9050611ffe565b509392505050565b600084511161266457600080fd5b336000908152601260205260409020805461267e90615b4b565b1590506126cd5760405162461bcd60e51b815260206004820152601760248201527f5573657220616c726561647920726567697374657265640000000000000000006044820152606401610ce4565b6040518060c001604052808581526020016126e9856020015190565b815233602080830182905260408084018790526060840186905260006080909401849052918352601290529020815181906127249082615c88565b506020820151600182015560408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201906127699082615c88565b506080820151600482019061277e9082615c88565b5060a0820151816005015590505050505050565b606060038054610a5190615b4b565b6127ac3383836143ba565b5050565b6000818152601360209081526040808320600b0180548251818502810185019093528083526060949383018282801561280857602002820191906000526020600020905b8154815260200190600101908083116127f4575b50505050509050600081516001600160401b0381111561282a5761282a615334565b60405190808252806020026020018201604052801561286357816020015b612850614e6e565b8152602001906001900390816128485790505b50905060005b825181101561264e576019600084838151811061288857612888615b85565b602002602001015181526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820180546128f290615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461291e90615b4b565b801561296b5780601f106129405761010080835404028352916020019161296b565b820191906000526020600020905b81548152906001019060200180831161294e57829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582018054806020026020016040519081016040528092919081815260200182805480156129d757602002820191906000526020600020905b8154815260200190600101908083116129c3575b505050505081526020016006820154815250508282815181106129fc576129fc615b85565b60200260200101819052508080612a1290615b9b565b915050612869565b612a243383613e90565b612a405760405162461bcd60e51b8152600401610ce490615bb4565b612a4c84848484614480565b50505050565b6001600160a01b03831660009081526012602052604081208054829190612a7890615b4b565b9050600003612a8657600080fd5b6001600160a01b038516600090815260126020526040808220815160c08101909252805482908290612ab790615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612ae390615b4b565b8015612b305780601f10612b0557610100808354040283529160200191612b30565b820191906000526020600020905b815481529060010190602001808311612b1357829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b03166040820152600382018054606090920191612b6a90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612b9690615b4b565b8015612be35780601f10612bb857610100808354040283529160200191612be3565b820191906000526020600020905b815481529060010190602001808311612bc657829003601f168201915b50505050508152602001600482018054612bfc90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612c2890615b4b565b8015612c755780601f10612c4a57610100808354040283529160200191612c75565b820191906000526020600020905b815481529060010190602001808311612c5857829003601f168201915b5050505050815260200160058201548152505090506000612c9a8260000151876144b3565b90506000612cb68360200151612cb1886020015190565b61450c565b9050818015612cc25750805b98600098509650505050505050565b6060610a3c82614546565b612ce4614fa6565b60008281526013602090815260409182902082516102a0810184528154815260018201549281019290925260028101546001600160a01b03811693830193909352600160a01b90920460ff1615156060820152600382018054919291608084019190612d4f90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612d7b90615b4b565b8015612dc85780601f10612d9d57610100808354040283529160200191612dc8565b820191906000526020600020905b815481529060010190602001808311612dab57829003601f168201915b50505050508152602001600482018054612de190615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612e0d90615b4b565b8015612e5a5780601f10612e2f57610100808354040283529160200191612e5a565b820191906000526020600020905b815481529060010190602001808311612e3d57829003601f168201915b50505050508152602001600582018054612e7390615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9f90615b4b565b8015612eec5780601f10612ec157610100808354040283529160200191612eec565b820191906000526020600020905b815481529060010190602001808311612ecf57829003601f168201915b50505050508152602001600682018054612f0590615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612f3190615b4b565b8015612f7e5780601f10612f5357610100808354040283529160200191612f7e565b820191906000526020600020905b815481529060010190602001808311612f6157829003601f168201915b50505050508152602001600782018054612f9790615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612fc390615b4b565b80156130105780601f10612fe557610100808354040283529160200191613010565b820191906000526020600020905b815481529060010190602001808311612ff357829003601f168201915b505050505081526020016008820154815260200160098201548152602001600a8201548152602001600b820180548060200260200160405190810160405280929190818152602001828054801561308657602002820191906000526020600020905b815481526020019060010190808311613072575b50505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e820180548060200260200160405190810160405280929190818152602001828054801561310d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116130ef575b50505050508152602001600f820180548060200260200160405190810160405280929190818152602001828054801561316f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613151575b50505050508152602001601082015481526020016011820154815260200160128201805480602002602001604051908101604052809291908181526020016000905b8282101561325d5783829060005260206000200180546131d090615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546131fc90615b4b565b80156132495780601f1061321e57610100808354040283529160200191613249565b820191906000526020600020905b81548152906001019060200180831161322c57829003601f168201915b5050505050815260200190600101906131b1565b505050508152602001601382018054806020026020016040519081016040528092919081815260200182805480156132be57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116132a0575b5050505050815250509050919050565b33600090815260126020526040902080546132e890615b4b565b90506000036132f657600080fd5b3360009081526012602052604081206001015461331890612cb1846020015190565b90508061335a5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081c185cdcdddbdc9960821b6044820152606401610ce4565b602083015133600090815260126020526040902060010155505050565b60608060006060600060126000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405290816000820180546133c090615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546133ec90615b4b565b80156134395780601f1061340e57610100808354040283529160200191613439565b820191906000526020600020905b81548152906001019060200180831161341c57829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b0316604082015260038201805460609092019161347390615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461349f90615b4b565b80156134ec5780601f106134c1576101008083540402835291602001916134ec565b820191906000526020600020905b8154815290600101906020018083116134cf57829003601f168201915b5050505050815260200160048201805461350590615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461353190615b4b565b801561357e5780601f106135535761010080835404028352916020019161357e565b820191906000526020600020905b81548152906001019060200180831161356157829003601f168201915b5050509183525050600591909101546020909101528051608082015160a08301516060909301519199909850919650945092505050565b60606014826040516135c79190615d98565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561361957602002820191906000526020600020905b815481526020019060010190808311613605575b50505050509050919050565b61362d613d5e565b6001600160a01b0381166136925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ce4565b61160a81614155565b6001600160a01b038116600090815260166020526040812054606091816001600160401b038111156136cf576136cf615334565b60405190808252806020026020018201604052801561370857816020015b6136f5614fa6565b8152602001906001900390816136ed5790505b50905060005b8281101561264e576001600160a01b038516600090815260166020526040812080548390811061374057613740615b85565b6000918252602080832091909101548083526013825260409283902083516102a0810185528154815260018201549381019390935260028101546001600160a01b03811694840194909452600160a01b90930460ff161515606083015260038301805491945091929160808401916137b790615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546137e390615b4b565b80156138305780601f1061380557610100808354040283529160200191613830565b820191906000526020600020905b81548152906001019060200180831161381357829003601f168201915b5050505050815260200160048201805461384990615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461387590615b4b565b80156138c25780601f10613897576101008083540402835291602001916138c2565b820191906000526020600020905b8154815290600101906020018083116138a557829003601f168201915b505050505081526020016005820180546138db90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461390790615b4b565b80156139545780601f1061392957610100808354040283529160200191613954565b820191906000526020600020905b81548152906001019060200180831161393757829003601f168201915b5050505050815260200160068201805461396d90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461399990615b4b565b80156139e65780601f106139bb576101008083540402835291602001916139e6565b820191906000526020600020905b8154815290600101906020018083116139c957829003601f168201915b505050505081526020016007820180546139ff90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054613a2b90615b4b565b8015613a785780601f10613a4d57610100808354040283529160200191613a78565b820191906000526020600020905b815481529060010190602001808311613a5b57829003601f168201915b505050505081526020016008820154815260200160098201548152602001600a8201548152602001600b8201805480602002602001604051908101604052809291908181526020018280548015613aee57602002820191906000526020600020905b815481526020019060010190808311613ada575b50505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e8201805480602002602001604051908101604052809291908181526020018280548015613b7557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b57575b50505050508152602001600f8201805480602002602001604051908101604052809291908181526020018280548015613bd757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613bb9575b50505050508152602001601082015481526020016011820154815260200160128201805480602002602001604051908101604052809291908181526020016000905b82821015613cc5578382906000526020600020018054613c3890615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054613c6490615b4b565b8015613cb15780601f10613c8657610100808354040283529160200191613cb1565b820191906000526020600020905b815481529060010190602001808311613c9457829003601f168201915b505050505081526020019060010190613c19565b50505050815260200160138201805480602002602001604051908101604052809291908181526020018280548015613d2657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d08575b505050505081525050838381518110613d4157613d41615b85565b60200260200101819052505080613d5790615b9b565b905061370e565b600d546001600160a01b03163314611b595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ce4565b6000610a3c82614641565b6000818152600460205260409020546001600160a01b031661160a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ce4565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613e57826118b1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080613e9c836118b1565b9050806001600160a01b0316846001600160a01b03161480613ee357506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b80613f075750836001600160a01b0316613efc84610c49565b6001600160a01b0316145b949350505050565b826001600160a01b0316613f22826118b1565b6001600160a01b031614613f485760405162461bcd60e51b8152600401610ce490615db4565b6001600160a01b038216613faa5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ce4565b613fb78383836001614666565b826001600160a01b0316613fca826118b1565b6001600160a01b031614613ff05760405162461bcd60e51b8152600401610ce490615db4565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6002600e54036140d25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ce4565b6002600e55565b6001600160a01b03821660009081526012602052604081206005018054839290614104908490615b38565b909155505060408051600081526020810183905242918101919091526001600160a01b038316907fc424236d12197e1ec7bea17e53f7631b14e52d78ce30527c0337514923afe0e090606001611310565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6127ac828260405180602001604052806000815250614672565b6000828152600460205260409020546001600160a01b031661423c5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610ce4565b6000828152600c602052604090206142548282615c88565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6127106001600160601b03821611156142fa5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610ce4565b6001600160a01b0382166143505760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610ce4565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6060604051806060016040528060228152602001615ec560229139905090565b816001600160a01b0316836001600160a01b03160361441b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ce4565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101611bf6565b61448b848484613f0f565b614497848484846146a5565b612a4c5760405162461bcd60e51b8152600401610ce490615df9565b6000816040516020016144c69190615d98565b60405160208183030381529060405280519060200120836040516020016144ed9190615d98565b6040516020818303038152906040528051906020012014905092915050565b60008160405160200161452191815260200190565b60408051601f19818403018152828252805160209182012090830186905291016144ed565b606061455182613dc3565b6000828152600c60205260408120805461456a90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461459690615b4b565b80156145e35780601f106145b8576101008083540402835291602001916145e3565b820191906000526020600020905b8154815290600101906020018083116145c657829003601f168201915b5050505050905060006145f461439a565b90508051600003614606575092915050565b815115614638578082604051602001614620929190615d69565b60405160208183030381529060405292505050919050565b613f07846147a6565b60006001600160e01b03198216632483248360e11b1480610a3c5750610a3c8261480d565b612a4c84848484614832565b61467c8383614966565b61468960008484846146a5565b610d855760405162461bcd60e51b8152600401610ce490615df9565b60006001600160a01b0384163b1561479b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906146e9903390899088908890600401615e4b565b6020604051808303816000875af1925050508015614724575060408051601f3d908101601f1916820190925261472191810190615e7e565b60015b614781573d808015614752576040519150601f19603f3d011682016040523d82523d6000602084013e614757565b606091505b5080516000036147795760405162461bcd60e51b8152600401610ce490615df9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613f07565b506001949350505050565b60606147b182613dc3565b60006147bb61439a565b905060008151116147db5760405180602001604052806000815250614806565b806147e584614aff565b6040516020016147f6929190615d69565b6040516020818303038152906040525b9392505050565b60006001600160e01b0319821663780e9d6360e01b1480610a3c5750610a3c82614b91565b60018111156148a15760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610ce4565b816001600160a01b0385166148fd576148f881600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b614920565b836001600160a01b0316856001600160a01b031614614920576149208582614bd1565b6001600160a01b03841661493c5761493781614c6e565b61495f565b846001600160a01b0316846001600160a01b03161461495f5761495f8482614d1d565b5050505050565b6001600160a01b0382166149bc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ce4565b6000818152600460205260409020546001600160a01b031615614a215760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ce4565b614a2f600083836001614666565b6000818152600460205260409020546001600160a01b031615614a945760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ce4565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606000614b0c83614d61565b60010190506000816001600160401b03811115614b2b57614b2b615334565b6040519080825280601f01601f191660200182016040528015614b55576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084614b5f57509392505050565b60006001600160e01b031982166380ac58cd60e01b1480614bc257506001600160e01b03198216635b5e139f60e01b145b80610a3c5750610a3c82614e39565b60006001614bde84611ac1565b614be89190615e9b565b600083815260096020526040902054909150808214614c3b576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090614c8090600190615e9b565b6000838152600b6020526040812054600a8054939450909284908110614ca857614ca8615b85565b9060005260206000200154905080600a8381548110614cc957614cc9615b85565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480614d0157614d01615eae565b6001900381819060005260206000200160009055905550505050565b6000614d2883611ac1565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614da05772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614dcc576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614dea57662386f26fc10000830492506010015b6305f5e1008310614e02576305f5e100830492506008015b6127108310614e1657612710830492506004015b60648310614e28576064830492506002015b600a8310610a3c5760010192915050565b60006001600160e01b0319821663152a902d60e11b1480610a3c57506301ffc9a760e01b6001600160e01b0319831614610a3c565b6040518060e001604052806000815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160608152602001600081525090565b828054828255906000526020600020908101928215614eef579160200282015b82811115614eef578251825591602001919060010190614ed4565b50614efb929150615053565b5090565b828054828255906000526020600020908101928215614eef579160200282015b82811115614eef57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614f1f565b828054828255906000526020600020908101928215614f9a579160200282015b82811115614f9a5782518290614f8a9082615c88565b5091602001919060010190614f74565b50614efb929150615068565b604051806102a00160405280600081526020016000815260200160006001600160a01b03168152602001600015158152602001606081526020016060815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160608152602001600015158152602001600081526020016060815260200160608152602001600081526020016000815260200160608152602001606081525090565b5b80821115614efb5760008155600101615054565b80821115614efb57600061507c8282615085565b50600101615068565b50805461509190615b4b565b6000825580601f106150a1575050565b601f01602090049060005260206000209081019061160a9190615053565b6000602082840312156150d157600080fd5b5035919050565b6001600160e01b03198116811461160a57600080fd5b60006020828403121561510057600080fd5b8135614806816150d8565b60005b8381101561512657818101518382015260200161510e565b50506000910152565b6000815180845261514781602086016020860161510b565b601f01601f19169290920160200192915050565b602081526000614806602083018461512f565b600081518084526020808501945080840160005b8381101561519e57815187529582019590820190600101615182565b509495945050505050565b8051825260018060a01b0360208201511660208301526000604082015160e060408501526151da60e085018261512f565b9050606083015160608501526080830151608085015260a083015184820360a0860152615207828261516e565b91505060c083015160c08501528091505092915050565b60208152600061480660208301846151a9565b80356001600160a01b038116811461524857600080fd5b919050565b6000806040838503121561526057600080fd5b61526983615231565b946020939093013593505050565b6000806040838503121561528a57600080fd5b50508035926020909101359150565b6000602082840312156152ab57600080fd5b61480682615231565b6020808252825182820181905260009190848201906040850190845b818110156152ec578351835292840192918401916001016152d0565b50909695505050505050565b60008060006060848603121561530d57600080fd5b61531684615231565b925061532460208501615231565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561536457615364615334565b604051601f8501601f19908116603f0116810190828211818310171561538c5761538c615334565b816040528093508581528686860111156153a557600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126153d057600080fd5b6148068383356020850161534a565b600080604083850312156153f257600080fd5b82356001600160401b038082111561540957600080fd5b615415868387016153bf565b9350602085013591508082111561542b57600080fd5b50615438858286016153bf565b9150509250929050565b60008060006060848603121561545757600080fd5b8335925060208401356001600160401b0381111561547457600080fd5b615480868287016153bf565b925050604084013590509250925092565b80356001600160601b038116811461524857600080fd5b600080600080600080600060e0888a0312156154c357600080fd5b6154cc88615231565b965060208801356001600160401b03808211156154e857600080fd5b6154f48b838c016153bf565b975060408a013591508082111561550a57600080fd5b6155168b838c016153bf565b965061552460608b01615491565b955060808a013591508082111561553a57600080fd5b6155468b838c016153bf565b945060a08a013591508082111561555c57600080fd5b6155688b838c016153bf565b935060c08a013591508082111561557e57600080fd5b5061558b8a828b016153bf565b91505092959891949750929550565b600081518084526020808501945080840160005b8381101561519e5781516001600160a01b0316875295820195908201906001016155ae565b600081518084526020808501808196508360051b8101915082860160005b8581101561561b57828403895261560984835161512f565b988501989350908401906001016155f1565b5091979650505050505050565b60006102a08251845260208301516020850152604083015161565560408601826001600160a01b03169052565b506060830151615669606086018215159052565b5060808301518160808601526156818286018261512f565b91505060a083015184820360a086015261569b828261512f565b91505060c083015184820360c08601526156b5828261512f565b91505060e083015184820360e08601526156cf828261512f565b91505061010080840151858303828701526156ea838261512f565b92505050610120808401518186015250610140808401518186015250610160808401518186015250610180808401518583038287015261572a838261516e565b925050506101a0808401516157428287018215159052565b50506101c083810151908501526101e08084015185830382870152615767838261559a565b925050506102008084015185830382870152615783838261559a565b9250505061022080840151818601525061024080840151818601525061026080840151858303828701526157b783826155d3565b9250505061028080840151858303828701526157d3838261559a565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561583257603f19888603018452615820858351615628565b94509285019290850190600101615804565b5092979650505050505050565b6000806000806080858703121561585557600080fd5b84356001600160401b038082111561586c57600080fd5b615878888389016153bf565b9550602087013591508082111561588e57600080fd5b61589a888389016153bf565b945060408701359150808211156158b057600080fd5b6158bc888389016153bf565b935060608701359150808211156158d257600080fd5b506158df878288016153bf565b91505092959194509250565b600080604083850312156158fe57600080fd5b61590783615231565b91506020830135801515811461591c57600080fd5b809150509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561583257603f1988860301845261596a8583516151a9565b9450928501929085019060010161594e565b6000806000806080858703121561599257600080fd5b61599b85615231565b93506159a960208601615231565b92506040850135915060608501356001600160401b038111156159cb57600080fd5b8501601f810187136159dc57600080fd5b6158df8782356020840161534a565b600080600060608486031215615a0057600080fd5b615a0984615231565b925060208401356001600160401b0380821115615a2557600080fd5b615a31878388016153bf565b93506040860135915080821115615a4757600080fd5b50615a54868287016153bf565b9150509250925092565b6020815260006148066020830184615628565b608081526000615a84608083018761512f565b8281036020840152615a96818761512f565b90508460408401528281036060840152615ab0818561512f565b979650505050505050565b600060208284031215615acd57600080fd5b81356001600160401b03811115615ae357600080fd5b613f07848285016153bf565b60008060408385031215615b0257600080fd5b615b0b83615231565b9150615b1960208401615231565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a3c57610a3c615b22565b600181811c90821680615b5f57607f821691505b602082108103615b7f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600060018201615bad57615bad615b22565b5060010190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b8082028115828204841417610a3c57610a3c615b22565b600082615c3557634e487b7160e01b600052601260045260246000fd5b500490565b601f821115610d8557600081815260208120601f850160051c81016020861015615c615750805b601f850160051c820191505b81811015615c8057828155600101615c6d565b505050505050565b81516001600160401b03811115615ca157615ca1615334565b615cb581615caf8454615b4b565b84615c3a565b602080601f831160018114615cea5760008415615cd25750858301515b600019600386901b1c1916600185901b178555615c80565b600085815260208120601f198616915b82811015615d1957888601518255948401946001909101908401615cfa565b5085821015615d375787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000615d5a604083018561512f565b90508260208301529392505050565b60008351615d7b81846020880161510b565b835190830190615d8f81836020880161510b565b01949350505050565b60008251615daa81846020870161510b565b9190910192915050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906157d39083018461512f565b600060208284031215615e9057600080fd5b8151614806816150d8565b81810381811115610a3c57610a3c615b22565b634e487b7160e01b600052603160045260246000fdfe68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732fa26469706673582212203899f78c6775687d9b602dcd74ac91581ca3a1dbd8fbe28b4f7e0320875817d264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c806360c6d8ae1161015a578063a4436aba116100c1578063d8be30fc1161007a578063d8be30fc146107dc578063d8d84f8f1461080c578063deb82ed91461082c578063e985e9c514610842578063f2fde38b1461088b578063fe532d10146108ab57600080fd5b8063a4436aba146106eb578063b88d4fde14610718578063bf06eda614610738578063c87b56dd1461076f578063ccfb9ba61461078f578063cdfbb351146107bc57600080fd5b806387fe9c831161011357806387fe9c831461062b5780638da5cb5b1461064b57806391adb1bb1461066957806393e54a561461069657806395d89b41146106b6578063a22cb465146106cb57600080fd5b806360c6d8ae146105805780636352211e146105965780636c6db136146105b657806370a08231146105d6578063715018a6146105f6578063813d7e871461060b57600080fd5b80631f45dbf3116101fe57806342842e0e116101b757806342842e0e146104e5578063476343ee146105055780634b3fcab51461051a5780634eb3a9e01461053a5780634f6ccce71461054d5780635f79cdfe1461056d57600080fd5b80631f45dbf31461041957806323b872dd146104465780632a55205a146104665780632af356c2146102d75780632cd8bf84146104a55780632f745c59146104c557600080fd5b80630800e300116102505780630800e30014610349578063081812fc146103765780630888de39146103ae578063095ea7b3146103c457806314ba9749146103e457806318160ddd1461040457600080fd5b8063010a38f51461028d578063012cc1e2146102b557806301bb8cc5146102d757806301ffc9a7146102f757806306fdde0314610327575b600080fd5b34801561029957600080fd5b506102a26108cb565b6040519081526020015b60405180910390f35b3480156102c157600080fd5b506102d56102d03660046150bf565b6108db565b005b3480156102e357600080fd5b506102d56102f23660046150bf565b6109df565b34801561030357600080fd5b506103176103123660046150ee565b610a31565b60405190151581526020016102ac565b34801561033357600080fd5b5061033c610a42565b6040516102ac919061515b565b34801561035557600080fd5b506103696103643660046150bf565b610ad4565b6040516102ac919061521e565b34801561038257600080fd5b506103966103913660046150bf565b610c49565b6040516001600160a01b0390911681526020016102ac565b3480156103ba57600080fd5b506102a260175481565b3480156103d057600080fd5b506102d56103df36600461524d565b610c70565b3480156103f057600080fd5b506102d56103ff366004615277565b610d8a565b34801561041057600080fd5b50600a546102a2565b34801561042557600080fd5b50610439610434366004615299565b610ee0565b6040516102ac91906152b4565b34801561045257600080fd5b506102d56104613660046152f8565b61108e565b34801561047257600080fd5b50610486610481366004615277565b6110bf565b604080516001600160a01b0390931683526020830191909152016102ac565b3480156104b157600080fd5b506102a26104c03660046150bf565b61116b565b3480156104d157600080fd5b506102a26104e036600461524d565b611188565b3480156104f157600080fd5b506102d56105003660046152f8565b61121e565b34801561051157600080fd5b506102d5611239565b34801561052657600080fd5b506102d56105353660046153df565b61131c565b6102d56105483660046150bf565b61137d565b34801561055957600080fd5b506102a26105683660046150bf565b61160d565b6102d561057b366004615277565b6116a0565b34801561058c57600080fd5b506102a260115481565b3480156105a257600080fd5b506103966105b13660046150bf565b6118b1565b3480156105c257600080fd5b506102d56105d1366004615442565b611911565b3480156105e257600080fd5b506102a26105f1366004615299565b611ac1565b34801561060257600080fd5b506102d5611b47565b34801561061757600080fd5b506102d56106263660046150bf565b611b5b565b34801561063757600080fd5b506102a26106463660046154a8565b611c03565b34801561065757600080fd5b50600d546001600160a01b0316610396565b34801561067557600080fd5b50610689610684366004615299565b611f8b565b6040516102ac91906157dd565b3480156106a257600080fd5b506102d56106b136600461583f565b612656565b3480156106c257600080fd5b5061033c612792565b3480156106d757600080fd5b506102d56106e63660046158eb565b6127a1565b3480156106f757600080fd5b5061070b6107063660046150bf565b6127b0565b6040516102ac9190615927565b34801561072457600080fd5b506102d561073336600461597c565b612a1a565b34801561074457600080fd5b506107586107533660046159eb565b612a52565b6040805192151583529015156020830152016102ac565b34801561077b57600080fd5b5061033c61078a3660046150bf565b612cd1565b34801561079b57600080fd5b506107af6107aa3660046150bf565b612cdc565b6040516102ac9190615a5e565b3480156107c857600080fd5b506102d56107d73660046153df565b6132ce565b3480156107e857600080fd5b506107fc6107f7366004615299565b613377565b6040516102ac9493929190615a71565b34801561081857600080fd5b50610439610827366004615abb565b6135b5565b34801561083857600080fd5b506102a26103e881565b34801561084e57600080fd5b5061031761085d366004615aef565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561089757600080fd5b506102d56108a6366004615299565b613625565b3480156108b757600080fd5b506106896108c6366004615299565b61369b565b60006108d6600f5490565b905090565b6000818152601960205260409020600101546001600160a01b03166108ff57600080fd5b6000818152601a6020908152604080832033845290915290205460ff161561092657600080fd5b600081815260196020526040902060010154336001600160a01b039091160361094e57600080fd5b6000818152601960205260408120600401805460019290610970908490615b38565b90915550506000818152601a6020908152604080832033808552908352818420805460ff19166001179055848452601983529281902060040154905190815283917f74193480b729de5bd62f8dc477d123a18811cce036b34c0747a1d0f1e8a2a65e910160405180910390a350565b6109e7613d5e565b6103e88111156109f657600080fd5b60178190556040518181527f7b7b531d40c1aa89dac7360f225e5660c63799638af64655583d3ec191be11e29060200160405180910390a150565b6000610a3c82613db8565b92915050565b606060028054610a5190615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7d90615b4b565b8015610aca5780601f10610a9f57610100808354040283529160200191610aca565b820191906000526020600020905b815481529060010190602001808311610aad57829003601f168201915b5050505050905090565b610adc614e6e565b6000828152601960205260409020600101546001600160a01b0316610b0057600080fd5b600082815260196020908152604091829020825160e0810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191610b4a90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7690615b4b565b8015610bc35780601f10610b9857610100808354040283529160200191610bc3565b820191906000526020600020905b815481529060010190602001808311610ba657829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020018280548015610c2f57602002820191906000526020600020905b815481526020019060010190808311610c1b575b505050505081526020016006820154815250509050919050565b6000610c5482613dc3565b506000908152600660205260409020546001600160a01b031690565b6000610c7b826118b1565b9050806001600160a01b0316836001600160a01b031603610ced5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610d095750610d09813361085d565b610d7b5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610ce4565b610d858383613e22565b505050565b60018110158015610d9c575060058111155b610da557600080fd5b6000805b60008481526013602081905260409091200154811015610e1f57600084815260136020819052604090912001805433919083908110610dea57610dea615b85565b6000918252602090912001546001600160a01b031603610e0d5760019150610e1f565b80610e1781615b9b565b915050610da9565b508015610e5e5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481c985d1959609a1b6044820152606401610ce4565b60008381526013602052604081206009018054849290610e7f908490615b38565b90915550506000838152601360205260408120600a01805460019290610ea6908490615b38565b9091555050506000918252506013602081815260408320909101805460018101825590835291200180546001600160a01b03191633179055565b60606000610eed600f5490565b6001600160401b03811115610f0457610f04615334565b604051908082528060200260200182016040528015610f2d578160200160208202803683370190505b509050600060015b600f548111610fea576000818152601360205260408120905b600f820154811015610fd557866001600160a01b031682600f018281548110610f7957610f79615b85565b6000918252602090912001546001600160a01b031603610fc35782858581518110610fa657610fa6615b85565b602090810291909101015283610fbb81615b9b565b945050610fd5565b80610fcd81615b9b565b915050610f4e565b50508080610fe290615b9b565b915050610f35565b506000816001600160401b0381111561100557611005615334565b60405190808252806020026020018201604052801561102e578160200160208202803683370190505b50905060005b828110156110855783818151811061104e5761104e615b85565b602002602001015182828151811061106857611068615b85565b60209081029190910101528061107d81615b9b565b915050611034565b50949350505050565b6110983382613e90565b6110b45760405162461bcd60e51b8152600401610ce490615bb4565b610d85838383613f0f565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916111345750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090611153906001600160601b031687615c01565b61115d9190615c18565b915196919550909350505050565b60006127106017548361117e9190615c01565b610a3c9190615c18565b600061119383611ac1565b82106111f55760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610ce4565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b610d8583838360405180602001604052806000815250612a1a565b611241613d5e565b60006011541161125057600080fd5b601180546000918290559061126d600d546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d80600081146112b7576040519150601f19603f3d011682016040523d82523d6000602084013e6112bc565b606091505b50509050806112ca57600080fd5b600d546001600160a01b03166001600160a01b03167fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a8360405161131091815260200190565b60405180910390a25050565b336000908152601260205260409020805461133690615b4b565b905060000361134457600080fd5b3360009081526012602052604090206003016113608382615c88565b50336000908152601260205260409020600401610d858282615c88565b611385614080565b600081815260136020526040902060020154600160a01b900460ff166113aa57600080fd5b6000818152601360205260409020600101543410156113c857600080fd5b600081815260136020526040902060020154336001600160a01b03909116036113f057600080fd5b60005b6000828152601360205260409020600f01548110156114b7576000828152601360205260409020600f0180543391908390811061143257611432615b85565b6000918252602090912001546001600160a01b0316036114a55760405162461bcd60e51b815260206004820152602860248201527f596f75206861766520616c7265616479207075726368617365642074686973206044820152677265736f7572636560c01b6064820152608401610ce4565b806114af81615b9b565b9150506113f3565b5060008181526013602052604081206008018054600192906114da908490615b38565b90915550506000818152601360208181526040808420600f81018054600181810183559187528487200180546001600160a01b031916339081179091558652601684528286208054808301825590875284872001879055868652939092526002820154929091015490516001600160a01b03929092169281156108fc029290818181858888f19350505050158015611576573d6000803e3d6000fd5b50600061158260105490565b9050611592601080546001019055565b6000828152601360209081526040918290206002810154600190910154835190815242928101929092529181018390526001600160a01b0390911690339084907f725ab672573b7f2e0f0f193920dbee98941ec549e9b36cf3bfc3cc83e51ae1ae9060600160405180910390a45061160a6001600e55565b50565b6000611618600a5490565b821061167b5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610ce4565b600a828154811061168e5761168e615b85565b90600052602060002001549050919050565b600081116116f05760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e2030000000006044820152606401610ce4565b336116fa836118b1565b6001600160a01b0316146117485760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606401610ce4565b600082815260136020526040902060020154600160a01b900460ff16156117a95760405162461bcd60e51b815260206004820152601560248201527419591d481a5cc8185b1c9958591e481b1a5cdd1959605a1b6044820152606401610ce4565b60006117b48261116b565b90506117bf8261116b565b34101561180e5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206c697374696e672066656500000000000000006044820152606401610ce4565b80601160008282546118209190615b38565b9091555050600083815260136020526040812060018101849055600201805460ff60a01b1916600160a01b17905561185760105490565b9050611867601080546001019055565b60408051848152426020820152908101829052339085907fdc69aa9aa1dd4abfb7a3d6b64d72382a2a4d38700d6b5c3d5784e23eb82be3379060600160405180910390a350505050565b6000818152600460205260408120546001600160a01b031680610a3c5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ce4565b600082511161191f57600080fd5b6000838152600460205260409020546001600160a01b031661194057600080fd5b8015611986576000818152601960205260409020600101546001600160a01b031661196a57600080fd5b6000818152601960205260409020600601541561198657600080fd5b611994601880546001019055565b600061199f60185490565b60008181526019602052604090208181556001810180546001600160a01b03191633179055909150600281016119d58582615c88565b5042600382015560006004820155600681018390558215611a435760008381526019602090815260408083206005018054600181018255908452918320909101849055513391849186917f773a33a5a4242f5ff076510cef32d710535badf6e057fe93491705ffb9cf29b191a45b60008581526013602090815260408220600b018054600181810183559184529190922001839055611a759033906140d9565b336001600160a01b031682867f92eb5433849a5a2a1922dadaf613eff78bb7de4173779f8d4683b877aac7260f8742604051611ab2929190615d47565b60405180910390a45050505050565b60006001600160a01b038216611b2b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610ce4565b506001600160a01b031660009081526005602052604090205490565b611b4f613d5e565b611b596000614155565b565b60008181526013602052604090206002810154600160a01b900460ff16611b8157600080fd5b33611b8b836118b1565b6001600160a01b031614611b9e57600080fd5b60028101805460ff60a01b19169055600060018083019190915560108054918201905560408051828152426020820152339185917f40516db99aa3df4a6f96ef1158a18bd27c30a7b4e719738adc639d18a00369aa91015b60405180910390a3505050565b6000611c13600f80546001019055565b6000611c1e600f5490565b9050611c2a89826141a7565b611c3481886141c1565b611c3f818a8861428c565b6000611c4961439a565b88604051602001611c5b929190615d69565b6040516020818303038152906040529050601485604051611c7c9190615d98565b9081526040805160209281900383018120805460018082018355600092835285832090910187905533825260158552838220805491820181558252848220018690556102a0820183528582528382018190526001600160a01b038e168284015260608201819052608082018d905260a0820185905260c082018a905260e082018990526101008201889052610120820181905261014082018190526101608201819052825181815280850184526101808301526101a082018190526101c08201819052825181815280850184526101e083015282518181528085018452610200830152426102208301526102408201819052825181815293840190925291610260830191611d9a565b6060815260200190600190039081611d855790505b5081526020016000604051908082528060200260200182016040528015611dcb578160200160208202803683370190505b509052600083815260136020908152604091829020835181559083015160018201559082015160028201805460608501511515600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560808201516003820190611e399082615c88565b5060a08201516004820190611e4e9082615c88565b5060c08201516005820190611e639082615c88565b5060e08201516006820190611e789082615c88565b506101008201516007820190611e8e9082615c88565b5061012082015160088201556101408201516009820155610160820151600a8201556101808201518051611ecc91600b840191602090910190614eb4565b506101a0820151600c8201805460ff19169115159190911790556101c0820151600d8201556101e08201518051611f0d91600e840191602090910190614eff565b506102008201518051611f2a91600f840191602090910190614eff565b50610220820151601082015561024082015160118201556102608201518051611f5d916012840191602090910190614f54565b506102808201518051611f7a916013840191602090910190614eff565b50929b9a5050505050505050505050565b6001600160a01b038116600090815260156020526040812054606091816001600160401b03811115611fbf57611fbf615334565b604051908082528060200260200182016040528015611ff857816020015b611fe5614fa6565b815260200190600190039081611fdd5790505b50905060005b8281101561264e576001600160a01b038516600090815260156020526040812080548390811061203057612030615b85565b6000918252602080832091909101548083526013825260409283902083516102a0810185528154815260018201549381019390935260028101546001600160a01b03811694840194909452600160a01b90930460ff161515606083015260038301805491945091929160808401916120a790615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546120d390615b4b565b80156121205780601f106120f557610100808354040283529160200191612120565b820191906000526020600020905b81548152906001019060200180831161210357829003601f168201915b5050505050815260200160048201805461213990615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461216590615b4b565b80156121b25780601f10612187576101008083540402835291602001916121b2565b820191906000526020600020905b81548152906001019060200180831161219557829003601f168201915b505050505081526020016005820180546121cb90615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546121f790615b4b565b80156122445780601f1061221957610100808354040283529160200191612244565b820191906000526020600020905b81548152906001019060200180831161222757829003601f168201915b5050505050815260200160068201805461225d90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461228990615b4b565b80156122d65780601f106122ab576101008083540402835291602001916122d6565b820191906000526020600020905b8154815290600101906020018083116122b957829003601f168201915b505050505081526020016007820180546122ef90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461231b90615b4b565b80156123685780601f1061233d57610100808354040283529160200191612368565b820191906000526020600020905b81548152906001019060200180831161234b57829003601f168201915b505050505081526020016008820154815260200160098201548152602001600a8201548152602001600b82018054806020026020016040519081016040528092919081815260200182805480156123de57602002820191906000526020600020905b8154815260200190600101908083116123ca575b50505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e820180548060200260200160405190810160405280929190818152602001828054801561246557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612447575b50505050508152602001600f82018054806020026020016040519081016040528092919081815260200182805480156124c757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116124a9575b50505050508152602001601082015481526020016011820154815260200160128201805480602002602001604051908101604052809291908181526020016000905b828210156125b557838290600052602060002001805461252890615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461255490615b4b565b80156125a15780601f10612576576101008083540402835291602001916125a1565b820191906000526020600020905b81548152906001019060200180831161258457829003601f168201915b505050505081526020019060010190612509565b5050505081526020016013820180548060200260200160405190810160405280929190818152602001828054801561261657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125f8575b50505050508152505083838151811061263157612631615b85565b6020026020010181905250508061264790615b9b565b9050611ffe565b509392505050565b600084511161266457600080fd5b336000908152601260205260409020805461267e90615b4b565b1590506126cd5760405162461bcd60e51b815260206004820152601760248201527f5573657220616c726561647920726567697374657265640000000000000000006044820152606401610ce4565b6040518060c001604052808581526020016126e9856020015190565b815233602080830182905260408084018790526060840186905260006080909401849052918352601290529020815181906127249082615c88565b506020820151600182015560408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201906127699082615c88565b506080820151600482019061277e9082615c88565b5060a0820151816005015590505050505050565b606060038054610a5190615b4b565b6127ac3383836143ba565b5050565b6000818152601360209081526040808320600b0180548251818502810185019093528083526060949383018282801561280857602002820191906000526020600020905b8154815260200190600101908083116127f4575b50505050509050600081516001600160401b0381111561282a5761282a615334565b60405190808252806020026020018201604052801561286357816020015b612850614e6e565b8152602001906001900390816128485790505b50905060005b825181101561264e576019600084838151811061288857612888615b85565b602002602001015181526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820180546128f290615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461291e90615b4b565b801561296b5780601f106129405761010080835404028352916020019161296b565b820191906000526020600020905b81548152906001019060200180831161294e57829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582018054806020026020016040519081016040528092919081815260200182805480156129d757602002820191906000526020600020905b8154815260200190600101908083116129c3575b505050505081526020016006820154815250508282815181106129fc576129fc615b85565b60200260200101819052508080612a1290615b9b565b915050612869565b612a243383613e90565b612a405760405162461bcd60e51b8152600401610ce490615bb4565b612a4c84848484614480565b50505050565b6001600160a01b03831660009081526012602052604081208054829190612a7890615b4b565b9050600003612a8657600080fd5b6001600160a01b038516600090815260126020526040808220815160c08101909252805482908290612ab790615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612ae390615b4b565b8015612b305780601f10612b0557610100808354040283529160200191612b30565b820191906000526020600020905b815481529060010190602001808311612b1357829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b03166040820152600382018054606090920191612b6a90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612b9690615b4b565b8015612be35780601f10612bb857610100808354040283529160200191612be3565b820191906000526020600020905b815481529060010190602001808311612bc657829003601f168201915b50505050508152602001600482018054612bfc90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612c2890615b4b565b8015612c755780601f10612c4a57610100808354040283529160200191612c75565b820191906000526020600020905b815481529060010190602001808311612c5857829003601f168201915b5050505050815260200160058201548152505090506000612c9a8260000151876144b3565b90506000612cb68360200151612cb1886020015190565b61450c565b9050818015612cc25750805b98600098509650505050505050565b6060610a3c82614546565b612ce4614fa6565b60008281526013602090815260409182902082516102a0810184528154815260018201549281019290925260028101546001600160a01b03811693830193909352600160a01b90920460ff1615156060820152600382018054919291608084019190612d4f90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612d7b90615b4b565b8015612dc85780601f10612d9d57610100808354040283529160200191612dc8565b820191906000526020600020905b815481529060010190602001808311612dab57829003601f168201915b50505050508152602001600482018054612de190615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612e0d90615b4b565b8015612e5a5780601f10612e2f57610100808354040283529160200191612e5a565b820191906000526020600020905b815481529060010190602001808311612e3d57829003601f168201915b50505050508152602001600582018054612e7390615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9f90615b4b565b8015612eec5780601f10612ec157610100808354040283529160200191612eec565b820191906000526020600020905b815481529060010190602001808311612ecf57829003601f168201915b50505050508152602001600682018054612f0590615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612f3190615b4b565b8015612f7e5780601f10612f5357610100808354040283529160200191612f7e565b820191906000526020600020905b815481529060010190602001808311612f6157829003601f168201915b50505050508152602001600782018054612f9790615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054612fc390615b4b565b80156130105780601f10612fe557610100808354040283529160200191613010565b820191906000526020600020905b815481529060010190602001808311612ff357829003601f168201915b505050505081526020016008820154815260200160098201548152602001600a8201548152602001600b820180548060200260200160405190810160405280929190818152602001828054801561308657602002820191906000526020600020905b815481526020019060010190808311613072575b50505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e820180548060200260200160405190810160405280929190818152602001828054801561310d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116130ef575b50505050508152602001600f820180548060200260200160405190810160405280929190818152602001828054801561316f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613151575b50505050508152602001601082015481526020016011820154815260200160128201805480602002602001604051908101604052809291908181526020016000905b8282101561325d5783829060005260206000200180546131d090615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546131fc90615b4b565b80156132495780601f1061321e57610100808354040283529160200191613249565b820191906000526020600020905b81548152906001019060200180831161322c57829003601f168201915b5050505050815260200190600101906131b1565b505050508152602001601382018054806020026020016040519081016040528092919081815260200182805480156132be57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116132a0575b5050505050815250509050919050565b33600090815260126020526040902080546132e890615b4b565b90506000036132f657600080fd5b3360009081526012602052604081206001015461331890612cb1846020015190565b90508061335a5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081c185cdcdddbdc9960821b6044820152606401610ce4565b602083015133600090815260126020526040902060010155505050565b60608060006060600060126000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405290816000820180546133c090615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546133ec90615b4b565b80156134395780601f1061340e57610100808354040283529160200191613439565b820191906000526020600020905b81548152906001019060200180831161341c57829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b0316604082015260038201805460609092019161347390615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461349f90615b4b565b80156134ec5780601f106134c1576101008083540402835291602001916134ec565b820191906000526020600020905b8154815290600101906020018083116134cf57829003601f168201915b5050505050815260200160048201805461350590615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461353190615b4b565b801561357e5780601f106135535761010080835404028352916020019161357e565b820191906000526020600020905b81548152906001019060200180831161356157829003601f168201915b5050509183525050600591909101546020909101528051608082015160a08301516060909301519199909850919650945092505050565b60606014826040516135c79190615d98565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561361957602002820191906000526020600020905b815481526020019060010190808311613605575b50505050509050919050565b61362d613d5e565b6001600160a01b0381166136925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ce4565b61160a81614155565b6001600160a01b038116600090815260166020526040812054606091816001600160401b038111156136cf576136cf615334565b60405190808252806020026020018201604052801561370857816020015b6136f5614fa6565b8152602001906001900390816136ed5790505b50905060005b8281101561264e576001600160a01b038516600090815260166020526040812080548390811061374057613740615b85565b6000918252602080832091909101548083526013825260409283902083516102a0810185528154815260018201549381019390935260028101546001600160a01b03811694840194909452600160a01b90930460ff161515606083015260038301805491945091929160808401916137b790615b4b565b80601f01602080910402602001604051908101604052809291908181526020018280546137e390615b4b565b80156138305780601f1061380557610100808354040283529160200191613830565b820191906000526020600020905b81548152906001019060200180831161381357829003601f168201915b5050505050815260200160048201805461384990615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461387590615b4b565b80156138c25780601f10613897576101008083540402835291602001916138c2565b820191906000526020600020905b8154815290600101906020018083116138a557829003601f168201915b505050505081526020016005820180546138db90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461390790615b4b565b80156139545780601f1061392957610100808354040283529160200191613954565b820191906000526020600020905b81548152906001019060200180831161393757829003601f168201915b5050505050815260200160068201805461396d90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461399990615b4b565b80156139e65780601f106139bb576101008083540402835291602001916139e6565b820191906000526020600020905b8154815290600101906020018083116139c957829003601f168201915b505050505081526020016007820180546139ff90615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054613a2b90615b4b565b8015613a785780601f10613a4d57610100808354040283529160200191613a78565b820191906000526020600020905b815481529060010190602001808311613a5b57829003601f168201915b505050505081526020016008820154815260200160098201548152602001600a8201548152602001600b8201805480602002602001604051908101604052809291908181526020018280548015613aee57602002820191906000526020600020905b815481526020019060010190808311613ada575b50505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e8201805480602002602001604051908101604052809291908181526020018280548015613b7557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b57575b50505050508152602001600f8201805480602002602001604051908101604052809291908181526020018280548015613bd757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613bb9575b50505050508152602001601082015481526020016011820154815260200160128201805480602002602001604051908101604052809291908181526020016000905b82821015613cc5578382906000526020600020018054613c3890615b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054613c6490615b4b565b8015613cb15780601f10613c8657610100808354040283529160200191613cb1565b820191906000526020600020905b815481529060010190602001808311613c9457829003601f168201915b505050505081526020019060010190613c19565b50505050815260200160138201805480602002602001604051908101604052809291908181526020018280548015613d2657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d08575b505050505081525050838381518110613d4157613d41615b85565b60200260200101819052505080613d5790615b9b565b905061370e565b600d546001600160a01b03163314611b595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ce4565b6000610a3c82614641565b6000818152600460205260409020546001600160a01b031661160a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ce4565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613e57826118b1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080613e9c836118b1565b9050806001600160a01b0316846001600160a01b03161480613ee357506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b80613f075750836001600160a01b0316613efc84610c49565b6001600160a01b0316145b949350505050565b826001600160a01b0316613f22826118b1565b6001600160a01b031614613f485760405162461bcd60e51b8152600401610ce490615db4565b6001600160a01b038216613faa5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ce4565b613fb78383836001614666565b826001600160a01b0316613fca826118b1565b6001600160a01b031614613ff05760405162461bcd60e51b8152600401610ce490615db4565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6002600e54036140d25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ce4565b6002600e55565b6001600160a01b03821660009081526012602052604081206005018054839290614104908490615b38565b909155505060408051600081526020810183905242918101919091526001600160a01b038316907fc424236d12197e1ec7bea17e53f7631b14e52d78ce30527c0337514923afe0e090606001611310565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6127ac828260405180602001604052806000815250614672565b6000828152600460205260409020546001600160a01b031661423c5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610ce4565b6000828152600c602052604090206142548282615c88565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6127106001600160601b03821611156142fa5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610ce4565b6001600160a01b0382166143505760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610ce4565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6060604051806060016040528060228152602001615ec560229139905090565b816001600160a01b0316836001600160a01b03160361441b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ce4565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101611bf6565b61448b848484613f0f565b614497848484846146a5565b612a4c5760405162461bcd60e51b8152600401610ce490615df9565b6000816040516020016144c69190615d98565b60405160208183030381529060405280519060200120836040516020016144ed9190615d98565b6040516020818303038152906040528051906020012014905092915050565b60008160405160200161452191815260200190565b60408051601f19818403018152828252805160209182012090830186905291016144ed565b606061455182613dc3565b6000828152600c60205260408120805461456a90615b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461459690615b4b565b80156145e35780601f106145b8576101008083540402835291602001916145e3565b820191906000526020600020905b8154815290600101906020018083116145c657829003601f168201915b5050505050905060006145f461439a565b90508051600003614606575092915050565b815115614638578082604051602001614620929190615d69565b60405160208183030381529060405292505050919050565b613f07846147a6565b60006001600160e01b03198216632483248360e11b1480610a3c5750610a3c8261480d565b612a4c84848484614832565b61467c8383614966565b61468960008484846146a5565b610d855760405162461bcd60e51b8152600401610ce490615df9565b60006001600160a01b0384163b1561479b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906146e9903390899088908890600401615e4b565b6020604051808303816000875af1925050508015614724575060408051601f3d908101601f1916820190925261472191810190615e7e565b60015b614781573d808015614752576040519150601f19603f3d011682016040523d82523d6000602084013e614757565b606091505b5080516000036147795760405162461bcd60e51b8152600401610ce490615df9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613f07565b506001949350505050565b60606147b182613dc3565b60006147bb61439a565b905060008151116147db5760405180602001604052806000815250614806565b806147e584614aff565b6040516020016147f6929190615d69565b6040516020818303038152906040525b9392505050565b60006001600160e01b0319821663780e9d6360e01b1480610a3c5750610a3c82614b91565b60018111156148a15760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610ce4565b816001600160a01b0385166148fd576148f881600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b614920565b836001600160a01b0316856001600160a01b031614614920576149208582614bd1565b6001600160a01b03841661493c5761493781614c6e565b61495f565b846001600160a01b0316846001600160a01b03161461495f5761495f8482614d1d565b5050505050565b6001600160a01b0382166149bc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ce4565b6000818152600460205260409020546001600160a01b031615614a215760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ce4565b614a2f600083836001614666565b6000818152600460205260409020546001600160a01b031615614a945760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ce4565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606000614b0c83614d61565b60010190506000816001600160401b03811115614b2b57614b2b615334565b6040519080825280601f01601f191660200182016040528015614b55576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084614b5f57509392505050565b60006001600160e01b031982166380ac58cd60e01b1480614bc257506001600160e01b03198216635b5e139f60e01b145b80610a3c5750610a3c82614e39565b60006001614bde84611ac1565b614be89190615e9b565b600083815260096020526040902054909150808214614c3b576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090614c8090600190615e9b565b6000838152600b6020526040812054600a8054939450909284908110614ca857614ca8615b85565b9060005260206000200154905080600a8381548110614cc957614cc9615b85565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480614d0157614d01615eae565b6001900381819060005260206000200160009055905550505050565b6000614d2883611ac1565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614da05772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614dcc576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614dea57662386f26fc10000830492506010015b6305f5e1008310614e02576305f5e100830492506008015b6127108310614e1657612710830492506004015b60648310614e28576064830492506002015b600a8310610a3c5760010192915050565b60006001600160e01b0319821663152a902d60e11b1480610a3c57506301ffc9a760e01b6001600160e01b0319831614610a3c565b6040518060e001604052806000815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160608152602001600081525090565b828054828255906000526020600020908101928215614eef579160200282015b82811115614eef578251825591602001919060010190614ed4565b50614efb929150615053565b5090565b828054828255906000526020600020908101928215614eef579160200282015b82811115614eef57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614f1f565b828054828255906000526020600020908101928215614f9a579160200282015b82811115614f9a5782518290614f8a9082615c88565b5091602001919060010190614f74565b50614efb929150615068565b604051806102a00160405280600081526020016000815260200160006001600160a01b03168152602001600015158152602001606081526020016060815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160608152602001600015158152602001600081526020016060815260200160608152602001600081526020016000815260200160608152602001606081525090565b5b80821115614efb5760008155600101615054565b80821115614efb57600061507c8282615085565b50600101615068565b50805461509190615b4b565b6000825580601f106150a1575050565b601f01602090049060005260206000209081019061160a9190615053565b6000602082840312156150d157600080fd5b5035919050565b6001600160e01b03198116811461160a57600080fd5b60006020828403121561510057600080fd5b8135614806816150d8565b60005b8381101561512657818101518382015260200161510e565b50506000910152565b6000815180845261514781602086016020860161510b565b601f01601f19169290920160200192915050565b602081526000614806602083018461512f565b600081518084526020808501945080840160005b8381101561519e57815187529582019590820190600101615182565b509495945050505050565b8051825260018060a01b0360208201511660208301526000604082015160e060408501526151da60e085018261512f565b9050606083015160608501526080830151608085015260a083015184820360a0860152615207828261516e565b91505060c083015160c08501528091505092915050565b60208152600061480660208301846151a9565b80356001600160a01b038116811461524857600080fd5b919050565b6000806040838503121561526057600080fd5b61526983615231565b946020939093013593505050565b6000806040838503121561528a57600080fd5b50508035926020909101359150565b6000602082840312156152ab57600080fd5b61480682615231565b6020808252825182820181905260009190848201906040850190845b818110156152ec578351835292840192918401916001016152d0565b50909695505050505050565b60008060006060848603121561530d57600080fd5b61531684615231565b925061532460208501615231565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561536457615364615334565b604051601f8501601f19908116603f0116810190828211818310171561538c5761538c615334565b816040528093508581528686860111156153a557600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126153d057600080fd5b6148068383356020850161534a565b600080604083850312156153f257600080fd5b82356001600160401b038082111561540957600080fd5b615415868387016153bf565b9350602085013591508082111561542b57600080fd5b50615438858286016153bf565b9150509250929050565b60008060006060848603121561545757600080fd5b8335925060208401356001600160401b0381111561547457600080fd5b615480868287016153bf565b925050604084013590509250925092565b80356001600160601b038116811461524857600080fd5b600080600080600080600060e0888a0312156154c357600080fd5b6154cc88615231565b965060208801356001600160401b03808211156154e857600080fd5b6154f48b838c016153bf565b975060408a013591508082111561550a57600080fd5b6155168b838c016153bf565b965061552460608b01615491565b955060808a013591508082111561553a57600080fd5b6155468b838c016153bf565b945060a08a013591508082111561555c57600080fd5b6155688b838c016153bf565b935060c08a013591508082111561557e57600080fd5b5061558b8a828b016153bf565b91505092959891949750929550565b600081518084526020808501945080840160005b8381101561519e5781516001600160a01b0316875295820195908201906001016155ae565b600081518084526020808501808196508360051b8101915082860160005b8581101561561b57828403895261560984835161512f565b988501989350908401906001016155f1565b5091979650505050505050565b60006102a08251845260208301516020850152604083015161565560408601826001600160a01b03169052565b506060830151615669606086018215159052565b5060808301518160808601526156818286018261512f565b91505060a083015184820360a086015261569b828261512f565b91505060c083015184820360c08601526156b5828261512f565b91505060e083015184820360e08601526156cf828261512f565b91505061010080840151858303828701526156ea838261512f565b92505050610120808401518186015250610140808401518186015250610160808401518186015250610180808401518583038287015261572a838261516e565b925050506101a0808401516157428287018215159052565b50506101c083810151908501526101e08084015185830382870152615767838261559a565b925050506102008084015185830382870152615783838261559a565b9250505061022080840151818601525061024080840151818601525061026080840151858303828701526157b783826155d3565b9250505061028080840151858303828701526157d3838261559a565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561583257603f19888603018452615820858351615628565b94509285019290850190600101615804565b5092979650505050505050565b6000806000806080858703121561585557600080fd5b84356001600160401b038082111561586c57600080fd5b615878888389016153bf565b9550602087013591508082111561588e57600080fd5b61589a888389016153bf565b945060408701359150808211156158b057600080fd5b6158bc888389016153bf565b935060608701359150808211156158d257600080fd5b506158df878288016153bf565b91505092959194509250565b600080604083850312156158fe57600080fd5b61590783615231565b91506020830135801515811461591c57600080fd5b809150509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561583257603f1988860301845261596a8583516151a9565b9450928501929085019060010161594e565b6000806000806080858703121561599257600080fd5b61599b85615231565b93506159a960208601615231565b92506040850135915060608501356001600160401b038111156159cb57600080fd5b8501601f810187136159dc57600080fd5b6158df8782356020840161534a565b600080600060608486031215615a0057600080fd5b615a0984615231565b925060208401356001600160401b0380821115615a2557600080fd5b615a31878388016153bf565b93506040860135915080821115615a4757600080fd5b50615a54868287016153bf565b9150509250925092565b6020815260006148066020830184615628565b608081526000615a84608083018761512f565b8281036020840152615a96818761512f565b90508460408401528281036060840152615ab0818561512f565b979650505050505050565b600060208284031215615acd57600080fd5b81356001600160401b03811115615ae357600080fd5b613f07848285016153bf565b60008060408385031215615b0257600080fd5b615b0b83615231565b9150615b1960208401615231565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a3c57610a3c615b22565b600181811c90821680615b5f57607f821691505b602082108103615b7f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600060018201615bad57615bad615b22565b5060010190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b8082028115828204841417610a3c57610a3c615b22565b600082615c3557634e487b7160e01b600052601260045260246000fd5b500490565b601f821115610d8557600081815260208120601f850160051c81016020861015615c615750805b601f850160051c820191505b81811015615c8057828155600101615c6d565b505050505050565b81516001600160401b03811115615ca157615ca1615334565b615cb581615caf8454615b4b565b84615c3a565b602080601f831160018114615cea5760008415615cd25750858301515b600019600386901b1c1916600185901b178555615c80565b600085815260208120601f198616915b82811015615d1957888601518255948401946001909101908401615cfa565b5085821015615d375787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000615d5a604083018561512f565b90508260208301529392505050565b60008351615d7b81846020880161510b565b835190830190615d8f81836020880161510b565b01949350505050565b60008251615daa81846020870161510b565b9190910192915050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906157d39083018461512f565b600060208284031215615e9057600080fd5b8151614806816150d8565b81810381811115610a3c57610a3c615b22565b634e487b7160e01b600052603160045260246000fdfe68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732fa26469706673582212203899f78c6775687d9b602dcd74ac91581ca3a1dbd8fbe28b4f7e0320875817d264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1916,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)1913_storage"
      },
      {
        "astId": 1921,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1913_storage)"
      },
      {
        "astId": 250,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 252,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 256,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 260,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 264,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 270,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1300,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1304,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1307,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1311,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1701,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 170,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_status",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3798,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)2463_storage"
      },
      {
        "astId": 3801,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_transactionCounter",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(Counter)2463_storage"
      },
      {
        "astId": 3803,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "totalFeesCollected",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3821,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_users",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(User)3816_storage)"
      },
      {
        "astId": 4275,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_eduResources",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(EduResource)4231_storage)"
      },
      {
        "astId": 4280,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_resourcesBySubject",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4285,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_resourcesByAddress",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4290,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_resourcesAddress",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4293,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "listingFeePercentage",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 5061,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_commentIdCounter",
        "offset": 0,
        "slot": "24",
        "type": "t_struct(Counter)2463_storage"
      },
      {
        "astId": 5066,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_comments",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_struct(Comment)4183_storage)"
      },
      {
        "astId": 5072,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_commentLikes",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(User)3816_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YourCollectible.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)3816_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Comment)4183_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.Comment)",
        "numberOfBytes": "32",
        "value": "t_struct(Comment)4183_storage"
      },
      "t_mapping(t_uint256,t_struct(EduResource)4231_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.EduResource)",
        "numberOfBytes": "32",
        "value": "t_struct(EduResource)4231_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1913_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Comment)4183_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.Comment",
        "members": [
          {
            "astId": 4169,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4171,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "author",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4173,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "content",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4175,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4177,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "likes",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4180,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "replies",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4182,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "parentId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)2463_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2462,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(EduResource)4231_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.EduResource",
        "members": [
          {
            "astId": 4185,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4187,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4189,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 4191,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isListed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4193,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "eduUri",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4195,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenUri",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4197,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "resourceType",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 4199,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "subject",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 4201,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "educationLevel",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4203,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "downloadCount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4205,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "rating",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4207,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "ratingCount",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 4210,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "commentIds",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4212,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isAccredited",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 4214,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "accreditedCount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 4217,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "accreditedInstitutions",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4220,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "buyers",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4222,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "creationTime",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 4224,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "minRating",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 4227,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "reviews",
            "offset": 0,
            "slot": "18",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 4230,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "reviewers",
            "offset": 0,
            "slot": "19",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "640"
      },
      "t_struct(RoyaltyInfo)1913_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1910,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1912,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(User)3816_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.User",
        "members": [
          {
            "astId": 3805,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3807,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "password",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3809,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 3811,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "avatar",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3813,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "bio",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3815,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "integral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}